import customtkinter as ctk
from datetime import datetime, date, timedelta
import db.db_funcs as db
from tkinter import messagebox, ttk
import threading
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


class LibraryApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
        self.geometry("900x400")
        self.minsize(700, 750)

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        self.session = db.get_session()
        self.current_user = None  # –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.is_running = True  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        self.setup_ui()

    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        title_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(title_frame, text="üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
                     font=ctk.CTkFont(size=24, weight="bold")).pack(pady=10)

        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_status_label = ctk.CTkLabel(title_frame,
                                              text="‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                                              text_color="red",
                                              font=ctk.CTkFont(weight="bold"))
        self.auth_status_label.pack(pady=5)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        content_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        left_column = ctk.CTkFrame(content_frame)
        left_column.pack(side="left", fill="both", expand=True, padx=(0, 10))

        # –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        right_column = ctk.CTkFrame(content_frame)
        right_column.pack(side="right", fill="y", padx=(10, 0))

        self.setup_statistics_section(left_column)
        self.setup_auth_section(right_column)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        self.full_version_btn = ctk.CTkButton(main_frame,
                                              text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏",
                                              command=self.open_full_version,
                                              state="disabled",
                                              fg_color="#7209B7",
                                              hover_color="#560BAD")
        self.full_version_btn.pack(pady=10)

    def setup_statistics_section(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ctk.CTkLabel(parent, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
                     font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_container = ctk.CTkFrame(parent)
        self.stats_container.pack(fill="both", expand=True, padx=10, pady=10)

        # –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.loading_label = ctk.CTkLabel(self.stats_container,
                                          text="üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...",
                                          font=ctk.CTkFont(size=14))
        self.loading_label.pack(pady=50)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.load_statistics, daemon=True).start()

    def setup_auth_section(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        ctk.CTkLabel(parent, text="üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_form = ctk.CTkFrame(parent)
        auth_form.pack(fill="x", padx=10, pady=10)

        # –ü–æ–ª–µ email
        ctk.CTkLabel(auth_form, text="Email:").pack(anchor="w", pady=(10, 0))
        self.auth_email = ctk.CTkEntry(auth_form, placeholder_text="example@library.ru")
        self.auth_email.pack(fill="x", padx=10, pady=5)

        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        ctk.CTkLabel(auth_form, text="–ü–∞—Ä–æ–ª—å:").pack(anchor="w", pady=(10, 0))
        self.auth_password = ctk.CTkEntry(auth_form, placeholder_text="–ü–∞—Ä–æ–ª—å", show="‚Ä¢")
        self.auth_password.pack(fill="x", padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        self.login_btn = ctk.CTkButton(auth_form, text="–í–æ–π—Ç–∏",
                                       command=self.authenticate_user)
        self.login_btn.pack(pady=15)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_password.bind("<Return>", lambda e: self.authenticate_user())

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = ctk.CTkFrame(parent, fg_color="transparent")
        info_frame.pack(fill="x", padx=10, pady=20)

        ctk.CTkLabel(info_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w")

        info_text = """
‚Ä¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã 
  —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ 
  –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
‚Ä¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å 
  –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        """
        ctk.CTkLabel(info_frame, text=info_text, justify="left").pack(anchor="w", pady=10)

    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if not self.is_running:
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            readers_count = db.get_readers_count(self.session)
            books_count = db.get_books_count(self.session)
            active_loans = len(db.get_active_loans(self.session))
            unpaid_fines = len(db.get_unpaid_fines(self.session))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º again, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if self.is_running:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.after(0, self.display_statistics, readers_count, books_count, active_loans, unpaid_fines)

        except Exception as e:
            if self.is_running:
                self.after(0, self.show_error, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    def display_statistics(self, readers, books, loans, fines):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.is_running:
            return

        # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label.pack_forget()

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_grid = ctk.CTkFrame(self.stats_container)
        stats_grid.pack(fill="both", expand=True, padx=10, pady=10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        for i in range(2):
            stats_grid.columnconfigure(i, weight=1)
        for i in range(2):
            stats_grid.rowconfigure(i, weight=1)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        stats_data = [
            ("üë• –ß–∏—Ç–∞—Ç–µ–ª–∏", readers, "#4CC9F0", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π"),
            ("üìö –ö–Ω–∏–≥–∏", books, "#4361EE", "–í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"),
            ("üìñ –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏", loans, "#F72585", "–ö–Ω–∏–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö —É —á–∏—Ç–∞—Ç–µ–ª–µ–π"),
            ("üí∞ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã", fines, "#7209B7", "–°—É–º–º–∞—Ä–Ω—ã–µ –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã")
        ]

        for i, (title, count, color, description) in enumerate(stats_data):
            row = i // 2
            col = i % 2

            # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            card = ctk.CTkFrame(stats_grid, fg_color=color, corner_radius=15)
            card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")

            # –ß–∏—Å–ª–æ
            count_label = ctk.CTkLabel(card, text=str(count),
                                       font=ctk.CTkFont(size=32, weight="bold"))
            count_label.pack(pady=(20, 5))

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = ctk.CTkLabel(card, text=title,
                                       font=ctk.CTkFont(size=16, weight="bold"))
            title_label.pack(pady=5)

            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_label = ctk.CTkLabel(card, text=description,
                                      font=ctk.CTkFont(size=12),
                                      wraplength=200)
            desc_label.pack(pady=(5, 20), padx=10)

    def authenticate_user(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        email = self.auth_email.get().strip()
        password = self.auth_password.get().strip()

        if not email or not password:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.login_btn.configure(text="üîÑ –í—Ö–æ–¥...", state="disabled")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._authenticate_thread,
                         args=(email, password), daemon=True).start()

    def _authenticate_thread(self, email, password):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            result = db.authenticate_librarian(self.session, email, password)
            if self.is_running:
                self.after(0, self._handle_auth_result, result)
        except Exception as e:
            if self.is_running:
                self.after(0, self._handle_auth_error, e)

    def _handle_auth_result(self, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if not self.is_running:
            return

        if user:
            self.current_user = user
            self.auth_status_label.configure(text=f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {user.name}",
                                             text_color="green")

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            self.full_version_btn.configure(state="normal")

            # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ "–í—ã–π—Ç–∏"
            self.login_btn.configure(text="–í—ã–π—Ç–∏",
                                     command=self.logout_user,
                                     fg_color="#F72585",
                                     hover_color="#B5179E")

            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!")

            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.auth_email.delete(0, "end")
            self.auth_password.delete(0, "end")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            self.login_btn.configure(text="–í–æ–π—Ç–∏", state="normal")

    def logout_user(self):
        """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.current_user = None
        self.auth_status_label.configure(text="‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                                         text_color="red")

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        self.full_version_btn.configure(state="disabled")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.login_btn.configure(text="–í–æ–π—Ç–∏",
                                 command=self.authenticate_user,
                                 fg_color=["#3B8ED0", "#1F6AA5"],
                                 hover_color=["#36719F", "#144870"])

        messagebox.showinfo("–í—ã—Ö–æ–¥", "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

    def open_full_version(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.current_user:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        self.is_running = False

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        if self.session:
            db.close_session(self.session)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        self.destroy()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
        full_app = FullLibraryApp(self.current_user)
        full_app.mainloop()

    def _handle_auth_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if not self.is_running:
            return
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error}")
        self.login_btn.configure(text="–í–æ–π—Ç–∏", state="normal")

    def show_error(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not self.is_running:
            return
        self.loading_label.configure(text=f"‚ùå {message}", text_color="red")

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.is_running = False
        if hasattr(self, 'session'):
            db.close_session(self.session)
        self.destroy()


class FullLibraryApp(ctk.CTk):
    """–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""

    def __init__(self, user):
        super().__init__()

        self.current_user = user
        self.session = db.get_session()
        self.is_running = True

        self.title(f"üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - {user.name}")
        self.geometry("1200x500")
        self.minsize(1000, 600)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.setup_ui()

    def setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(fill="both", expand=True, padx=20, pady=20)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabview.add("–ì–ª–∞–≤–Ω–∞—è")
        self.tabview.add("–ß–∏—Ç–∞—Ç–µ–ª–∏")
        self.tabview.add("–ö–Ω–∏–≥–∏")
        self.tabview.add("–í—ã–¥–∞—á–∏")
        self.tabview.add("–®—Ç—Ä–∞—Ñ—ã")
        self.tabview.add("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä–∏")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = ctk.CTkFrame(self.tabview.tab("–ì–ª–∞–≤–Ω–∞—è"))
        user_info.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(user_info, text=f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {self.current_user.name}",
                     font=ctk.CTkFont(weight="bold")).pack(side="left")

        ctk.CTkLabel(user_info, text=f"üìß {self.current_user.email}",
                     font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(20, 0))

        if self.current_user.position:
            ctk.CTkLabel(user_info, text=f"üíº {self.current_user.position}",
                         font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(20, 0))

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        ctk.CTkButton(user_info, text="üö™ –í—ã–π—Ç–∏",
                      command=self.logout,
                      fg_color="#F72585",
                      hover_color="#B5179E").pack(side="right")

        # –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
        for tab_name in ["–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä–∏"]:
            tab = self.tabview.tab(tab_name)
            ctk.CTkLabel(tab, text=f"–†–∞–∑–¥–µ–ª '{tab_name}' - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                         font=ctk.CTkFont(size=16)).pack(pady=50)
            ctk.CTkLabel(tab, text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π —á–∞—Å—Ç—å—é —Å–∏—Å—Ç–µ–º—ã",
                         font=ctk.CTkFont(size=12)).pack(pady=10)

        self.setup_readers_tab()
        self.setup_books_tab()
        self.setup_loans_tab()
        self.setup_fines_tab()

    def setup_books_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ö–Ω–∏–≥–∏ —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏"""
        tab = self.tabview.tab("–ö–Ω–∏–≥–∏")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤
        mode_frame = ctk.CTkFrame(main_frame)
        mode_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(mode_frame, text="–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                     font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(0, 10))

        self.books_mode = ctk.StringVar(value="books")
        ctk.CTkRadioButton(mode_frame, text="üìö –û–±–∑–æ—Ä –∫–Ω–∏–≥",
                           variable=self.books_mode, value="books",
                           command=self.switch_books_mode).pack(side="left", padx=(0, 20))
        ctk.CTkRadioButton(mode_frame, text="üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏",
                           variable=self.books_mode, value="copies",
                           command=self.switch_books_mode).pack(side="left")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞)
        self.books_content_frame = ctk.CTkFrame(main_frame)
        self.books_content_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ —Ä–µ–∂–∏–º–∞, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
        self.setup_books_mode()
        self.setup_copies_mode()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        self.switch_books_mode()

    def setup_loans_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –í—ã–¥–∞—á–∏"""
        tab = self.tabview.tab("–í—ã–¥–∞—á–∏")

        # –û—á–∏—â–∞–µ–º –≤–∫–ª–∞–¥–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for widget in tab.winfo_children():
            widget.destroy()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ctk.CTkFrame(main_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 10), pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞—á
        right_panel = ctk.CTkFrame(main_frame)
        right_panel.pack(side="right", fill="both", expand=True, pady=10)

        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        ctk.CTkLabel(left_panel, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–¥–∞—á–∞–º–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ctk.CTkFrame(left_panel)
        stats_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(stats_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–¥–∞—á",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.active_loans_label = ctk.CTkLabel(stats_frame, text="–ê–∫—Ç–∏–≤–Ω—ã–µ: 0")
        self.active_loans_label.pack(anchor="w", pady=2)

        self.overdue_loans_label = ctk.CTkLabel(stats_frame, text="–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ: 0")
        self.overdue_loans_label.pack(anchor="w", pady=2)

        self.today_return_label = ctk.CTkLabel(stats_frame, text="–°–µ–≥–æ–¥–Ω—è –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: 0")
        self.today_return_label.pack(anchor="w", pady=2)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(left_panel)
        filter_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.loans_filter = ctk.CTkComboBox(filter_frame,
                                            values=[
                                                "–í—Å–µ –≤—ã–¥–∞—á–∏",
                                                "–ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏",
                                                "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ",
                                                "–í–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–µ",
                                                "–°–µ–≥–æ–¥–Ω—è –∫ –≤–æ–∑–≤—Ä–∞—Ç—É"
                                            ],
                                            command=self.apply_loans_filter)
        self.loans_filter.set("–í—Å–µ –≤—ã–¥–∞—á–∏")
        self.loans_filter.pack(fill="x", pady=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.loans_search = ctk.CTkEntry(search_frame, placeholder_text="–ß–∏—Ç–∞—Ç–µ–ª—å, –∫–Ω–∏–≥–∞, –∏–Ω–≤. –Ω–æ–º–µ—Ä")
        self.loans_search.pack(fill="x", pady=5)
        self.loans_search.bind("<KeyRelease>", self.search_loans)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(left_panel)
        btn_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkButton(btn_frame, text="üìñ –í—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É",
                      command=self.show_issue_book_dialog,
                      fg_color="#4CC9F0",
                      hover_color="#3AA8D4").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É",
                      command=self.show_return_book_dialog,
                      fg_color="#7209B7",
                      hover_color="#560BAD").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫",
                      command=self.show_extend_loan_dialog,
                      fg_color="#F72585",
                      hover_color="#D41773").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_loans).pack(fill="x", pady=5)

        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–ü–ò–°–û–ö –í–´–î–ê–ß ===
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(right_panel)
        header_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(header_frame, text="üìã –°–ø–∏—Å–æ–∫ –≤—ã–¥–∞—á",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(side="left")

        self.loans_count_label = ctk.CTkLabel(header_frame, text="–í—Å–µ–≥–æ: 0")
        self.loans_count_label.pack(side="right")

        # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–¥–∞—á
        table_frame = ctk.CTkFrame(right_panel)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        # –°–æ–∑–¥–∞–µ–º Treeview —Å –ø–æ–ª–æ—Å–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.loans_tree = ttk.Treeview(table_frame,
                                       columns=("ID", "Reader", "Book", "Inventory",
                                                "IssueDate", "DueDate", "Status", "Actions"),
                                       show="headings",
                                       height=15)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_config = [
            ("ID", "ID", 50),
            ("Reader", "–ß–∏—Ç–∞—Ç–µ–ª—å", 150),
            ("Book", "–ö–Ω–∏–≥–∞", 200),
            ("Inventory", "–ò–Ω–≤. –Ω–æ–º–µ—Ä", 100),
            ("IssueDate", "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", 100),
            ("DueDate", "–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞", 100),
            ("Status", "–°—Ç–∞—Ç—É—Å", 120),
            ("Actions", "–î–µ–π—Å—Ç–≤–∏—è", 100)
        ]

        for col_id, heading, width in columns_config:
            self.loans_tree.heading(col_id, text=heading)
            self.loans_tree.column(col_id, width=width)

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.loans_tree.yview)
        self.loans_tree.configure(yscrollcommand=scrollbar.set)

        self.loans_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.loans_tree.bind("<Double-1>", self.on_loan_double_click)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_loans()

    def setup_fines_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –®—Ç—Ä–∞—Ñ—ã"""
        tab = self.tabview.tab("–®—Ç—Ä–∞—Ñ—ã")

        # –û—á–∏—â–∞–µ–º –≤–∫–ª–∞–¥–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for widget in tab.winfo_children():
            widget.destroy()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        left_panel = ctk.CTkFrame(main_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 10), pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —à—Ç—Ä–∞—Ñ–æ–≤
        right_panel = ctk.CTkFrame(main_frame)
        right_panel.pack(side="right", fill="both", expand=True, pady=10)

        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        ctk.CTkLabel(left_panel, text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞–º–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤
        stats_frame = ctk.CTkFrame(left_panel)
        stats_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(stats_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.total_fines_label = ctk.CTkLabel(stats_frame, text="–í—Å–µ–≥–æ —à—Ç—Ä–∞—Ñ–æ–≤: 0")
        self.total_fines_label.pack(anchor="w", pady=2)

        self.unpaid_fines_label = ctk.CTkLabel(stats_frame, text="–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: 0")
        self.unpaid_fines_label.pack(anchor="w", pady=2)

        self.total_amount_label = ctk.CTkLabel(stats_frame, text="–û–±—â–∞—è —Å—É–º–º–∞: 0 —Ä—É–±.")
        self.total_amount_label.pack(anchor="w", pady=2)

        self.unpaid_amount_label = ctk.CTkLabel(stats_frame, text="–°—É–º–º–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: 0 —Ä—É–±.")
        self.unpaid_amount_label.pack(anchor="w", pady=2)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(left_panel)
        filter_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.fines_filter = ctk.CTkComboBox(filter_frame,
                                            values=[
                                                "–í—Å–µ —à—Ç—Ä–∞—Ñ—ã",
                                                "–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ",
                                                "–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ",
                                                "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é",
                                                "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
                                            ],
                                            command=self.apply_fines_filter)
        self.fines_filter.set("–í—Å–µ —à—Ç—Ä–∞—Ñ—ã")
        self.fines_filter.pack(fill="x", pady=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.fines_search = ctk.CTkEntry(search_frame, placeholder_text="–ß–∏—Ç–∞—Ç–µ–ª—å, –∫–Ω–∏–≥–∞, —Å—É–º–º–∞...")
        self.fines_search.pack(fill="x", pady=5)
        self.fines_search.bind("<KeyRelease>", self.search_fines)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(left_panel)
        btn_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkButton(btn_frame, text="‚ûï –°–æ–∑–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ",
                      command=self.show_create_fine_dialog,
                      fg_color="#4CC9F0",
                      hover_color="#3AA8D4").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                      command=self.mark_fine_paid,
                      fg_color="#7209B7",
                      hover_color="#560BAD").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="üîÑ –ê–≤—Ç–æ-—à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
                      command=self.auto_create_overdue_fines,
                      fg_color="#F72585",
                      hover_color="#D41773").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —à—Ç—Ä–∞—Ñ",
                      command=self.delete_fine,
                      fg_color="#E63946",
                      hover_color="#C1121F").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_fines).pack(fill="x", pady=5)

        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–ü–ò–°–û–ö –®–¢–†–ê–§–û–í ===
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(right_panel)
        header_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(header_frame, text="üìã –°–ø–∏—Å–æ–∫ —à—Ç—Ä–∞—Ñ–æ–≤",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(side="left")

        self.fines_count_label = ctk.CTkLabel(header_frame, text="–í—Å–µ–≥–æ: 0")
        self.fines_count_label.pack(side="right")

        # –¢–∞–±–ª–∏—Ü–∞ —à—Ç—Ä–∞—Ñ–æ–≤
        table_frame = ctk.CTkFrame(right_panel)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        # –°–æ–∑–¥–∞–µ–º Treeview —Å –ø–æ–ª–æ—Å–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.fines_tree = ttk.Treeview(table_frame,
                                       columns=("ID", "Reader", "Book", "Amount", "IssuedDate",
                                                "Status", "LoanID", "Librarian"),
                                       show="headings",
                                       height=15)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_config = [
            ("ID", "ID", 50),
            ("Reader", "–ß–∏—Ç–∞—Ç–µ–ª—å", 150),
            ("Book", "–ö–Ω–∏–≥–∞", 200),
            ("Amount", "–°—É–º–º–∞", 100),
            ("IssuedDate", "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", 120),
            ("Status", "–°—Ç–∞—Ç—É—Å", 120),
            ("LoanID", "ID –≤—ã–¥–∞—á–∏", 80),
            ("Librarian", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å", 120)
        ]

        for col_id, heading, width in columns_config:
            self.fines_tree.heading(col_id, text=heading)
            self.fines_tree.column(col_id, width=width)

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.fines_tree.yview)
        self.fines_tree.configure(yscrollcommand=scrollbar.set)

        self.fines_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.fines_tree.bind("<Double-1>", self.on_fine_double_click)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_fines()

    def setup_books_mode(self):
        """–†–µ–∂–∏–º –æ–±–∑–æ—Ä–∞ –∫–Ω–∏–≥"""
        self.books_frame = ctk.CTkFrame(self.books_content_frame)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ctk.CTkFrame(self.books_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 10), pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        right_panel = ctk.CTkFrame(self.books_frame)
        right_panel.pack(side="right", fill="both", expand=True, pady=10)

        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        ctk.CTkLabel(left_panel, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(left_panel)
        filter_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.books_filter = ctk.CTkComboBox(filter_frame,
                                            values=[
                                                "–í—Å–µ –∫–Ω–∏–≥–∏",
                                                "–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏",
                                                "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
                                                "–ú–∞–ª–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (1-2)"
                                            ],
                                            command=self.apply_books_filter)
        self.books_filter.set("–í—Å–µ –∫–Ω–∏–≥–∏")
        self.books_filter.pack(fill="x", pady=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.books_search = ctk.CTkEntry(search_frame, placeholder_text="–ù–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä, ISBN")
        self.books_search.pack(fill="x", pady=5)
        self.books_search.bind("<KeyRelease>", self.search_books)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(left_panel)
        btn_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkButton(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É",
                      command=self.show_add_book_dialog).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä",
                      command=self.show_add_copy_dialog,
                      fg_color="#4CC9F0").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É",
                      command=self.show_edit_book_dialog).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É",
                      command=self.delete_book).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_books).pack(fill="x", pady=5)

        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–ü–ò–°–û–ö –ö–ù–ò–ì ===
        header_frame = ctk.CTkFrame(right_panel)
        header_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(header_frame, text="–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(side="left")

        self.books_count_label = ctk.CTkLabel(header_frame, text="–í—Å–µ–≥–æ: 0")
        self.books_count_label.pack(side="right")

        # –¢–∞–±–ª–∏—Ü–∞ –∫–Ω–∏–≥
        table_frame = ctk.CTkFrame(right_panel)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        self.books_tree = ttk.Treeview(table_frame,
                                       columns=("ID", "Title", "Author", "ISBN", "Year",
                                                "TotalCopies", "AvailableCopies", "Genre"),
                                       show="headings")

        columns_config = [
            ("ID", "ID", 50),
            ("Title", "–ù–∞–∑–≤–∞–Ω–∏–µ", 200),
            ("Author", "–ê–≤—Ç–æ—Ä", 150),
            ("ISBN", "ISBN", 120),
            ("Year", "–ì–æ–¥", 80),
            ("TotalCopies", "–í—Å–µ–≥–æ —ç–∫–∑.", 100),
            ("AvailableCopies", "–í –Ω–∞–ª–∏—á–∏–∏", 100),
            ("Genre", "–ñ–∞–Ω—Ä", 120)
        ]

        for col_id, heading, width in columns_config:
            self.books_tree.heading(col_id, text=heading)
            self.books_tree.column(col_id, width=width)

        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.books_tree.yview)
        self.books_tree.configure(yscrollcommand=scrollbar.set)

        self.books_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.books_tree.bind("<Double-1>", lambda e: self.show_edit_book_dialog())

    def setup_copies_mode(self):
        """–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏"""
        self.copies_frame = ctk.CTkFrame(self.books_content_frame)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ctk.CTkFrame(self.copies_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 10), pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        right_panel = ctk.CTkFrame(self.copies_frame)
        right_panel.pack(side="right", fill="both", expand=True, pady=10)

        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        ctk.CTkLabel(left_panel, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–∏–ª—å—Ç—Ä—ã —Å—Ç–∞—Ç—É—Å–∞
        filter_frame = ctk.CTkFrame(left_panel)
        filter_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.copies_filter = ctk.CTkComboBox(filter_frame,
                                             values=[
                                                 "–í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã",
                                                 "–í –Ω–∞–ª–∏—á–∏–∏",
                                                 "–ù–∞ —Ä—É–∫–∞—Ö",
                                                 "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã",
                                                 "–°–ø–∏—Å–∞–Ω—ã"
                                             ],
                                             command=self.apply_copies_filter)
        self.copies_filter.set("–í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã")
        self.copies_filter.pack(fill="x", pady=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.copies_search = ctk.CTkEntry(search_frame, placeholder_text="–ù–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        self.copies_search.pack(fill="x", pady=5)
        self.copies_search.bind("<KeyRelease>", self.search_copies)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(left_panel)
        btn_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkButton(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä",
                      command=self.show_add_copy_dialog).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                      command=self.show_change_copy_status_dialog,
                      fg_color="#4CC9F0").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–°–ø–∏—Å–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä",
                      command=self.write_off_copy,
                      fg_color="#F72585").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_book_copies).pack(fill="x", pady=5)

        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–ü–ò–°–û–ö –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í ===
        header_frame = ctk.CTkFrame(right_panel)
        header_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(header_frame, text="–°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(side="left")

        self.copies_count_label = ctk.CTkLabel(header_frame, text="–í—Å–µ–≥–æ: 0")
        self.copies_count_label.pack(side="right")

        # –¢–∞–±–ª–∏—Ü–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        table_frame = ctk.CTkFrame(right_panel)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        self.copies_tree = ttk.Treeview(table_frame,
                                        columns=("ID", "InvNumber", "BookTitle", "Author",
                                                 "Status", "DueDate", "Reader", "Condition"),
                                        show="headings")

        columns_config = [
            ("ID", "ID", 50),
            ("InvNumber", "–ò–Ω–≤. –Ω–æ–º–µ—Ä", 120),
            ("BookTitle", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏", 200),
            ("Author", "–ê–≤—Ç–æ—Ä", 150),
            ("Status", "–°—Ç–∞—Ç—É—Å", 120),
            ("DueDate", "–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞", 120),
            ("Reader", "–ß–∏—Ç–∞—Ç–µ–ª—å", 150),
            ("Condition", "–°–æ—Å—Ç–æ—è–Ω–∏–µ", 100)
        ]

        for col_id, heading, width in columns_config:
            self.copies_tree.heading(col_id, text=heading)
            self.copies_tree.column(col_id, width=width)

        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.copies_tree.yview)
        self.copies_tree.configure(yscrollcommand=scrollbar.set)

        self.copies_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def switch_books_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –∫–Ω–∏–≥ –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        mode = self.books_mode.get()

        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã
        self.books_frame.pack_forget()
        self.copies_frame.pack_forget()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ñ—Ä–µ–π–º
        if mode == "books":
            self.books_frame.pack(fill="both", expand=True)
            self.load_books()
        else:
            self.copies_frame.pack(fill="both", expand=True)
            self.load_book_copies()

    def load_books(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö"""
        try:
            books = db.get_all_books(self.session)
            self.all_books = []

            for book in books:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö
                copies = db.get_copies_by_book(self.session, book.id)
                total_copies = len(copies)
                available_copies = len(
                    [c for c in copies if c.available == True])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ available –≤–º–µ—Å—Ç–æ status

                # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã –∫–Ω–∏–≥–∏
                genres = book.genres
                genre_names = [genre.name for genre in genres] if genres else []
                genre_display = ", ".join(genre_names) if genre_names else "–ù–µ —É–∫–∞–∑–∞–Ω"

                self.all_books.append({
                    'id': book.id,
                    'title': book.title,
                    'author': book.author,
                    'isbn': book.isbn,
                    'year': book.publish_year,
                    'genre': genre_display,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∂–∞–Ω—Ä–æ–≤
                    'total_copies': total_copies,
                    'available_copies': available_copies
                })

            self.apply_books_filter(self.books_filter.get())

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥–∏: {e}")

    def apply_books_filter(self, choice):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥"""
        if not hasattr(self, 'all_books'):
            return

        filtered_books = []

        if choice == "–í—Å–µ –∫–Ω–∏–≥–∏":
            filtered_books = self.all_books
        elif choice == "–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏":
            filtered_books = [b for b in self.all_books if b['available_copies'] > 0]
        elif choice == "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏":
            filtered_books = [b for b in self.all_books if b['available_copies'] == 0]
        elif choice == "–ú–∞–ª–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (1-2)":
            filtered_books = [b for b in self.all_books if 1 <= b['available_copies'] <= 2]

        self.display_books(filtered_books)

    def search_books(self, event=None):
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥"""
        search_term = self.books_search.get().strip().lower()
        if not search_term:
            self.apply_books_filter(self.books_filter.get())
            return

        filtered_books = []
        for book in self.all_books:
            if (search_term in book['title'].lower() or
                    search_term in book['author'].lower() or
                    (book['isbn'] and search_term in book['isbn'].lower()) or
                    (book['genre'] and search_term in book['genre'].lower())):
                filtered_books.append(book)

        self.display_books(filtered_books)

    def display_books(self, books):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–∏–≥ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        for item in self.books_tree.get_children():
            self.books_tree.delete(item)

        for book in books:
            self.books_tree.insert("", "end", values=(
                book['id'],
                book['title'],
                book['author'],
                book['isbn'] or "-",
                book['year'] or "-",
                book['total_copies'],
                book['available_copies'],
                book['genre'] or "-"
            ))

        self.books_count_label.configure(text=f"–í—Å–µ–≥–æ: {len(books)}")

    def load_book_copies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥"""
        try:
            copies = db.get_all_book_copies(self.session)
            self.all_copies = []

            for copy in copies:
                book = db.get_book_by_id(self.session, copy.book_id)
                reader_name = "-"
                due_date = "-"

                # –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –≤—ã–¥–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Ç–∞—Ç–µ–ª–µ
                if not copy.available:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ available
                    loan = db.get_active_loan_by_copy(self.session, copy.id)
                    if loan:
                        reader = db.get_reader_by_id(self.session, loan.reader_id)
                        reader_name = reader.name if reader else "-"
                        due_date = loan.return_date.strftime("%d.%m.%Y") if loan.return_date else "-"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç–æ–º
                if copy.available:
                    status_text = "–í –Ω–∞–ª–∏—á–∏–∏"
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
                    loan = db.get_active_loan_by_copy(self.session, copy.id)
                    if loan and loan.return_date and loan.return_date < date.today():
                        status_text = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
                    else:
                        status_text = "–ù–∞ —Ä—É–∫–∞—Ö"

                self.all_copies.append({
                    'id': copy.id,
                    'inventory_number': copy.inventory_number,
                    'book_title': book.title if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    'author': book.author if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    'status': status_text,
                    'due_date': due_date,
                    'reader': reader_name,
                    'condition': copy.condition,
                    'copy_obj': copy
                })

            self.apply_copies_filter(self.copies_filter.get())

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã: {e}")

    def get_copy_status_text(self, status):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        status_map = {
            'available': '–í –Ω–∞–ª–∏—á–∏–∏',
            'borrowed': '–ù–∞ —Ä—É–∫–∞—Ö',
            'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
            'written_off': '–°–ø–∏—Å–∞–Ω–∞',
            'repair': '–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ'
        }
        return status_map.get(status, status)

    def apply_copies_filter(self, choice):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Å–ø–∏—Å–∫—É —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        if not hasattr(self, 'all_copies'):
            return

        filtered_copies = []

        if choice == "–í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã":
            filtered_copies = self.all_copies
        elif choice == "–í –Ω–∞–ª–∏—á–∏–∏":
            filtered_copies = [c for c in self.all_copies if c['copy_obj'].status == 'available']
        elif choice == "–ù–∞ —Ä—É–∫–∞—Ö":
            filtered_copies = [c for c in self.all_copies if c['copy_obj'].status == 'borrowed']
        elif choice == "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã":
            filtered_copies = [c for c in self.all_copies if c['copy_obj'].status == 'overdue']
        elif choice == "–°–ø–∏—Å–∞–Ω—ã":
            filtered_copies = [c for c in self.all_copies if c['copy_obj'].status == 'written_off']

        self.display_copies(filtered_copies)

    def search_copies(self, event=None):
        """–ü–æ–∏—Å–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        search_term = self.copies_search.get().strip().lower()
        if not search_term:
            self.apply_copies_filter(self.copies_filter.get())
            return

        filtered_copies = []
        for copy in self.all_copies:
            if (search_term in copy['book_title'].lower() or
                    search_term in copy['inventory_number'].lower()):
                filtered_copies.append(copy)

        self.display_copies(filtered_copies)

    def display_copies(self, copies):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        for item in self.copies_tree.get_children():
            self.copies_tree.delete(item)

        for copy in copies:
            self.copies_tree.insert("", "end", values=(
                copy['id'],
                copy['inventory_number'],
                copy['book_title'],
                copy['author'],
                copy['status'],
                copy['due_date'],
                copy['reader'],
                copy['condition']
            ))

        self.copies_count_label.configure(text=f"–í—Å–µ–≥–æ: {len(copies)}")

    def show_add_book_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
        dialog.geometry("500x650")
        dialog.minsize(500, 700)
        dialog.transient(self)
        dialog.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(main_container, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º—ã
        form_scrollable = ctk.CTkScrollableFrame(main_container)
        form_scrollable.pack(fill="both", expand=True)

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ:*", "title"),
            ("–ê–≤—Ç–æ—Ä:*", "author"),
            ("ISBN:", "isbn"),
            ("–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:", "year"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ:", "description")
        ]

        entries = {}
        for label, key in fields:
            ctk.CTkLabel(form_scrollable, text=label).pack(anchor="w", pady=(10, 0))
            if key == "description":
                entry = ctk.CTkTextbox(form_scrollable, height=80)
                entry.pack(fill="x", pady=5)
            else:
                entry = ctk.CTkEntry(form_scrollable, height=35)
                entry.pack(fill="x", pady=5)
            entries[key] = entry

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ)
        ctk.CTkLabel(form_scrollable, text="–ñ–∞–Ω—Ä—ã:").pack(anchor="w", pady=(10, 0))

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        genres_scrollable = ctk.CTkScrollableFrame(
            form_scrollable,
            height=120,
            fg_color=("gray80", "gray20")
        )
        genres_scrollable.pack(fill="x", pady=5)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        genres = db.get_all_genres(self.session)
        genre_vars = {}

        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞
        for genre in genres:
            var = ctk.BooleanVar()
            chk = ctk.CTkCheckBox(
                genres_scrollable,
                text=genre.name,
                variable=var
            )
            chk.pack(anchor="w", pady=2)
            genre_vars[genre.id] = var

        entries['genres'] = genre_vars

        # –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏
        def save_book():
            try:
                title = entries['title'].get().strip()
                author = entries['author'].get().strip()

                if not title or not author:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –ê–≤—Ç–æ—Ä)")
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É
                book_data = {
                    'title': title,
                    'author': author,
                    'isbn': entries['isbn'].get().strip() or None,
                    'publication_year': int(entries['year'].get()) if entries['year'].get().strip() else None,
                    'description': entries['description'].get("1.0", "end-1c").strip() or None
                }

                result = db.create_book(self.session, **book_data)
                if result:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã –∫ –∫–Ω–∏–≥–µ
                    selected_genre_vars = entries['genres']
                    added_genres_count = 0

                    for genre_id, var in selected_genre_vars.items():
                        if var.get():
                            success = db.add_genre_to_book(self.session, result.id, genre_id)
                            if success:
                                added_genres_count += 1

                    success_message = f"–ö–Ω–∏–≥–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
                    if added_genres_count > 0:
                        success_message += f"\n–î–æ–±–∞–≤–ª–µ–Ω–æ –∂–∞–Ω—Ä–æ–≤: {added_genres_count}"

                    messagebox.showinfo("–£—Å–ø–µ—Ö", success_message)
                    dialog.destroy()
                    self.load_books()

            except ValueError as e:
                if "year" in str(e).lower():
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–≤–Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(15, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_book,
                      width=100).pack(side="right")

    def show_add_copy_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä")
        dialog.geometry("450x500")  # –£–≤–µ–ª–∏—á–∏–ª –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        dialog.minsize(450, 500)
        dialog.transient(self)
        dialog.grab_set()

        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        ctk.CTkLabel(main_container, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–Ω–∏–≥–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º—ã
        form_scrollable = ctk.CTkScrollableFrame(main_container)
        form_scrollable.pack(fill="both", expand=True)

        # –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏
        ctk.CTkLabel(form_scrollable, text="–ö–Ω–∏–≥–∞:*").pack(anchor="w", pady=(10, 0))

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞
        books = db.get_all_books(self.session)
        book_options = [f"{book.title} ({book.author})" for book in books]
        book_ids = [book.id for book in books]

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ ID –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É —Ç–µ–∫—Å—Ç—É
        book_mapping = {f"{book.title} ({book.author})": book.id for book in books}

        book_combo = ctk.CTkComboBox(form_scrollable, values=book_options)
        book_combo.pack(fill="x", pady=5)

        ctk.CTkLabel(form_scrollable, text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä:*").pack(anchor="w", pady=(10, 0))
        inv_entry = ctk.CTkEntry(form_scrollable, height=35)
        inv_entry.pack(fill="x", pady=5)

        ctk.CTkLabel(form_scrollable, text="–°–æ—Å—Ç–æ—è–Ω–∏–µ:*").pack(anchor="w", pady=(10, 0))
        condition_combo = ctk.CTkComboBox(form_scrollable,
                                          values=["–û—Ç–ª–∏—á–Ω–æ–µ", "–•–æ—Ä–æ—à–µ–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "–ü–ª–æ—Ö–æ–µ"])
        condition_combo.set("–•–æ—Ä–æ—à–µ–µ")
        condition_combo.pack(fill="x", pady=5)

        ctk.CTkLabel(form_scrollable, text="–ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è:").pack(anchor="w", pady=(10, 0))
        location_entry = ctk.CTkEntry(form_scrollable, height=35, placeholder_text="–°—Ç–µ–ª–ª–∞–∂, –ø–æ–ª–∫–∞")
        location_entry.pack(fill="x", pady=5)

        def save_copy():
            try:
                selected_book_text = book_combo.get().strip()
                if not selected_book_text:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É")
                    return

                # –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                book_id = book_mapping.get(selected_book_text)
                if book_id is None:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞")
                    return

                inventory_number = inv_entry.get().strip()
                condition = condition_combo.get()
                location = location_entry.get().strip() or None

                if not inventory_number:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
                    return

                result = db.create_book_copy(self.session, book_id, inventory_number, condition, location)
                if result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–≠–∫–∑–µ–º–ø–ª—è—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    dialog.destroy()
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞
                    self.load_books()
                    self.load_book_copies()

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–≤–Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(15, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_copy,
                      width=100).pack(side="right")

    def show_edit_book_dialog(self):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
        selected = self.books_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
        book_id = self.books_tree.item(selected[0])['values'][0]
        book = db.get_book_by_id(self.session, book_id)

        if not book:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        dialog = ctk.CTkToplevel(self)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
        dialog.geometry("500x650")
        dialog.minsize(500, 650)
        dialog.transient(self)
        dialog.grab_set()

        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        ctk.CTkLabel(main_container, text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {book.title}",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º—ã
        form_scrollable = ctk.CTkScrollableFrame(main_container)
        form_scrollable.pack(fill="both", expand=True)

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ:*", "title"),
            ("–ê–≤—Ç–æ—Ä:*", "author"),
            ("ISBN:", "isbn"),
            ("–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:", "publish_year"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ:", "description")
        ]

        entries = {}
        for label, key in fields:
            ctk.CTkLabel(form_scrollable, text=label).pack(anchor="w", pady=(10, 0))
            if key == "description":
                entry = ctk.CTkTextbox(form_scrollable, height=80)
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                if getattr(book, key, None):
                    entry.insert("1.0", getattr(book, key))
                entry.pack(fill="x", pady=5)
            else:
                entry = ctk.CTkEntry(form_scrollable, height=35)
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                current_value = getattr(book, key, "")
                entry.insert(0, str(current_value) if current_value is not None else "")
                entry.pack(fill="x", pady=5)
            entries[key] = entry

        # –ü–æ–ª–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        ctk.CTkLabel(form_scrollable, text="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:").pack(anchor="w", pady=(10, 0))
        available_var = ctk.BooleanVar(value=book.available)
        available_check = ctk.CTkCheckBox(form_scrollable, text="–ö–Ω–∏–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞", variable=available_var)
        available_check.pack(anchor="w", pady=5)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ)
        ctk.CTkLabel(form_scrollable, text="–ñ–∞–Ω—Ä—ã:").pack(anchor="w", pady=(10, 0))

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        genres_scrollable = ctk.CTkScrollableFrame(
            form_scrollable,
            height=120,
            fg_color=("gray80", "gray20")
        )
        genres_scrollable.pack(fill="x", pady=5)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        all_genres = db.get_all_genres(self.session)
        genre_vars = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∂–∞–Ω—Ä—ã –∫–Ω–∏–≥–∏
        current_genre_ids = [genre.id for genre in book.genres] if book.genres else []

        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞
        for genre in all_genres:
            var = ctk.BooleanVar(value=(genre.id in current_genre_ids))
            chk = ctk.CTkCheckBox(
                genres_scrollable,
                text=genre.name,
                variable=var
            )
            chk.pack(anchor="w", pady=2)
            genre_vars[genre.id] = var

        def save_changes():
            try:
                title = entries['title'].get().strip()
                author = entries['author'].get().strip()

                if not title or not author:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –ê–≤—Ç–æ—Ä)")
                    return

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    'title': title,
                    'author': author,
                    'isbn': entries['isbn'].get().strip() or None,
                    'description': entries['description'].get("1.0", "end-1c").strip() or None,
                    'available': available_var.get()
                }

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è
                year_str = entries['publish_year'].get().strip()
                if year_str:
                    try:
                        update_data['publish_year'] = int(year_str)
                    except ValueError:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                        return
                else:
                    update_data['publish_year'] = None

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
                result = db.update_book(self.session, book_id, **update_data)
                if not result:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã
                selected_genre_ids = []
                for genre_id, var in genre_vars.items():
                    if var.get():
                        selected_genre_ids.append(genre_id)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∂–∞–Ω—Ä—ã
                genre_result = db.set_book_genres(self.session, book_id, selected_genre_ids)

                if genre_result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–Ω–∏–≥–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    dialog.destroy()
                    self.load_books()
                else:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                           "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∂–∞–Ω—Ä–∞–º–∏")

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–≤–Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(15, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_changes,
                      width=100).pack(side="right")

        # –§–æ–∫—É—Å–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
        entries['title'].focus_set()

    def delete_book(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏"""
        selected = self.books_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
        book_id = self.books_tree.item(selected[0])['values'][0]
        book_title = self.books_tree.item(selected[0])['values'][1]
        book_author = self.books_tree.item(selected[0])['values'][2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–Ω–∏–≥–∏
        copies = db.get_copies_by_book(self.session, book_id)
        if copies:
            messagebox.showwarning(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
                f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É '{book_title}'\n\n"
                f"–°—É—â–µ—Å—Ç–≤—É—é—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —ç—Ç–æ–π –∫–Ω–∏–≥–∏ ({len(copies)} —à—Ç.).\n"
                f"–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–Ω–∏–≥–∏."
            )
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É?\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book_title}\n"
            f"–ê–≤—Ç–æ—Ä: {book_author}\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            icon='warning'
        )

        if not confirm:
            return

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            success = db.delete_book(self.session, book_id)
            if success:
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–Ω–∏–≥–∞ '{book_title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                self.load_books()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}")

    def show_change_copy_status_dialog(self):
        """–î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–Ω–∏–≥–∏"""
        selected = self.copies_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        copy_id = self.copies_tree.item(selected[0])['values'][0]
        inventory_number = self.copies_tree.item(selected[0])['values'][1]
        book_title = self.copies_tree.item(selected[0])['values'][2]
        current_status = self.copies_tree.item(selected[0])['values'][4]
        current_condition = self.copies_tree.item(selected[0])['values'][5]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        copy = db.get_copy_by_id(self.session, copy_id)
        if not copy:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–≠–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        dialog = ctk.CTkToplevel(self)
        dialog.title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞")
        dialog.geometry("500x400")
        dialog.minsize(500, 400)
        dialog.transient(self)
        dialog.grab_set()

        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        ctk.CTkLabel(main_container, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        info_frame = ctk.CTkFrame(main_container)
        info_frame.pack(fill="x", pady=(0, 15))

        ctk.CTkLabel(info_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))

        ctk.CTkLabel(info_frame, text=f"üìñ –ö–Ω–∏–≥–∞: {book_title}").pack(anchor="w", pady=2)
        ctk.CTkLabel(info_frame, text=f"üî¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {inventory_number}").pack(anchor="w", pady=2)
        ctk.CTkLabel(info_frame, text=f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}").pack(anchor="w", pady=2)
        ctk.CTkLabel(info_frame, text=f"üè∑Ô∏è –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_condition}").pack(anchor="w", pady=2)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        ctk.CTkLabel(main_container, text="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:*",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 0))

        status_combo = ctk.CTkComboBox(main_container,
                                       values=["–î–æ—Å—Ç—É–ø–µ–Ω", "–í—ã–¥–∞–Ω", "–í —Ä–µ–º–æ–Ω—Ç–µ", "–£—Ç–µ—Ä—è–Ω"])
        status_combo.set(current_status)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status_combo.pack(fill="x", pady=5)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        ctk.CTkLabel(main_container, text="–°–æ—Å—Ç–æ—è–Ω–∏–µ:*",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 0))

        condition_combo = ctk.CTkComboBox(main_container,
                                          values=["–û—Ç–ª–∏—á–Ω–æ–µ", "–•–æ—Ä–æ—à–µ–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "–ü–ª–æ—Ö–æ–µ"])
        condition_combo.set(current_condition)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        condition_combo.pack(fill="x", pady=5)

        # –ü–æ–ª–µ –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        ctk.CTkLabel(main_container, text="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:").pack(anchor="w", pady=(10, 0))
        note_entry = ctk.CTkEntry(main_container, height=35, placeholder_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")
        note_entry.pack(fill="x", pady=5)

        def save_status():
            try:
                new_status = status_combo.get()
                new_condition = condition_combo.get()
                note = note_entry.get().strip() or None

                if not new_status or not new_condition:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    return

                # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ available
                status_to_available = {
                    "–î–æ—Å—Ç—É–ø–µ–Ω": True,
                    "–í—ã–¥–∞–Ω": False,
                    "–í —Ä–µ–º–æ–Ω—Ç–µ": False,
                    "–£—Ç–µ—Ä—è–Ω": False,
                }

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    'available': status_to_available.get(new_status, False),
                    'condition': new_condition
                }

                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                # if note:
                #     update_data['note'] = note

                # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
                result = db.update_copy(self.session, copy_id, **update_data)
                if result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
                    dialog.destroy()
                    self.load_book_copies()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤

                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    print(f"–°—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {inventory_number} –∏–∑–º–µ–Ω–µ–Ω: {current_status} -> {new_status}")
                    if note:
                        print(f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}")

                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞")

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(20, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_status,
                      width=100).pack(side="right")

        # –§–æ–∫—É—Å–∏—Ä—É–µ–º –Ω–∞ –∫–æ–º–±–æ–±–æ–∫—Å–µ —Å—Ç–∞—Ç—É—Å–∞
        status_combo.focus_set()

    def write_off_copy(self):
        """–°–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
        selected = self.copies_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è")
            return

        item = self.copies_tree.item(selected[0])
        copy_id = item['values'][0]
        inv_number = item['values'][1]
        book_title = item['values'][2]

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä {inv_number}?\n"
                                   f"–ö–Ω–∏–≥–∞: {book_title}"):
            return

        try:
            db.delete_copy(self.session, copy_id)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–≠–∫–∑–µ–º–ø–ª—è—Ä {inv_number} —Å–ø–∏—Å–∞–Ω")
            self.load_book_copies()
            self.load_books()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä: {e}")

    def center_dialog(self, dialog):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞"""
        dialog.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
        y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.is_running = False
        if self.session:
            db.close_session(self.session)
        self.destroy()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_app = LibraryApp()
        auth_app.mainloop()

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.is_running = False
        if hasattr(self, 'session'):
            db.close_session(self.session)
        self.destroy()
        sys.exit(0)

    def setup_readers_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ß–∏—Ç–∞—Ç–µ–ª–∏"""
        tab = self.tabview.tab("–ß–∏—Ç–∞—Ç–µ–ª–∏")

        # –û—á–∏—â–∞–µ–º –≤–∫–ª–∞–¥–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for widget in tab.winfo_children():
            widget.destroy()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ctk.CTkFrame(main_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 10), pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π
        right_panel = ctk.CTkFrame(main_frame)
        right_panel.pack(side="right", fill="both", expand=True, pady=10)

        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        ctk.CTkLabel(left_panel, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è–º–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(left_panel)
        filter_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä —á–∏—Ç–∞—Ç–µ–ª–µ–π:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.reader_filter = ctk.CTkComboBox(filter_frame,
                                             values=[
                                                 "–í—Å–µ —á–∏—Ç–∞—Ç–µ–ª–∏",
                                                 "–° –∫–Ω–∏–≥–∞–º–∏ –Ω–∞ —Ä—É–∫–∞—Ö",
                                                 "–° –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º–∏",
                                                 "–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–¥–∞—á"
                                             ],
                                             command=self.apply_reader_filter)
        self.reader_filter.set("–í—Å–µ —á–∏—Ç–∞—Ç–µ–ª–∏")
        self.reader_filter.pack(fill="x", pady=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.reader_search = ctk.CTkEntry(search_frame, placeholder_text="–ò–º—è, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
        self.reader_search.pack(fill="x", pady=5)
        self.reader_search.bind("<KeyRelease>", self.search_readers)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(left_panel)
        btn_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkButton(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è",
                      command=self.show_add_reader_dialog).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ",
                      command=self.show_edit_reader_dialog,
                      fg_color="#4CC9F0").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ",
                      command=self.delete_reader,
                      fg_color="#F72585").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_readers).pack(fill="x", pady=5)

        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–ü–ò–°–û–ö –ß–ò–¢–ê–¢–ï–õ–ï–ô ===
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(right_panel)
        header_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(header_frame, text="–°–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(side="left")

        self.readers_count_label = ctk.CTkLabel(header_frame, text="–í—Å–µ–≥–æ: 0")
        self.readers_count_label.pack(side="right")

        # –¢–∞–±–ª–∏—Ü–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π
        table_frame = ctk.CTkFrame(right_panel)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        # –°–æ–∑–¥–∞–µ–º Treeview —Å –ø–æ–ª–æ—Å–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.readers_tree = ttk.Treeview(table_frame,
                                         columns=("ID", "Name", "Email", "Phone", "RegDate", "ActiveLoans", "Overdue"),
                                         show="headings")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_config = [
            ("ID", "ID", 50),
            ("Name", "–§–ò–û", 200),
            ("Email", "Email", 150),
            ("Phone", "–¢–µ–ª–µ—Ñ–æ–Ω", 120),
            ("RegDate", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", 120),
            ("ActiveLoans", "–ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏", 120),
            ("Overdue", "–ü—Ä–æ—Å—Ä–æ—á–∫–∏", 80)
        ]

        for col_id, heading, width in columns_config:
            self.readers_tree.heading(col_id, text=heading)
            self.readers_tree.column(col_id, width=width)

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.readers_tree.yview)
        self.readers_tree.configure(yscrollcommand=scrollbar.set)

        self.readers_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.readers_tree.bind("<Double-1>", lambda e: self.show_edit_reader_dialog())

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_readers()

    def apply_reader_filter(self, choice):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Å–ø–∏—Å–∫—É —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        if not hasattr(self, 'all_readers'):
            return

        filtered_readers = []

        if choice == "–í—Å–µ —á–∏—Ç–∞—Ç–µ–ª–∏":
            filtered_readers = self.all_readers
        elif choice == "–° –∫–Ω–∏–≥–∞–º–∏ –Ω–∞ —Ä—É–∫–∞—Ö":
            for reader in self.all_readers:
                if reader.get('active_loans', 0) > 0:
                    filtered_readers.append(reader)
        elif choice == "–° –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º–∏":
            for reader in self.all_readers:
                if reader.get('overdue', 0) > 0:
                    filtered_readers.append(reader)
        elif choice == "–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–¥–∞—á":
            for reader in self.all_readers:
                if reader.get('active_loans', 0) == 0:
                    filtered_readers.append(reader)

        self.display_readers(filtered_readers)

    def search_readers(self, event=None):
        """–ü–æ–∏—Å–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        search_term = self.reader_search.get().strip().lower()
        if not search_term:
            self.apply_reader_filter(self.reader_filter.get())
            return

        filtered_readers = []
        for reader in self.all_readers:
            if (search_term in reader['name'].lower() or
                    search_term in reader['email'].lower() or
                    (reader['phone'] and search_term in reader['phone'])):
                filtered_readers.append(reader)

        self.display_readers(filtered_readers)

    def load_readers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π
            readers = db.get_all_readers(self.session)

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–∏—Ç–∞—Ç–µ–ª–µ
            self.all_readers = []
            for reader in readers:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏
                active_loans = db.get_loans_by_reader(self.session, reader.id, active_only=True)

                # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏
                overdue_count = 0
                for loan in active_loans:
                    if loan.return_date < date.today():
                        overdue_count += 1

                self.all_readers.append({
                    'id': reader.id,
                    'name': reader.name,
                    'email': reader.email,
                    'phone': reader.phone_number,
                    'reg_date': reader.registration_date,
                    'active_loans': len(active_loans),
                    'overdue': overdue_count
                })

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
            self.apply_reader_filter(self.reader_filter.get())

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª–µ–π: {e}")

    def display_readers(self, readers):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.readers_tree.get_children():
            self.readers_tree.delete(item)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for reader in readers:
            self.readers_tree.insert("", "end", values=(
                reader['id'],
                reader['name'],
                reader['email'],
                reader['phone'] or "-",
                reader['reg_date'].strftime("%d.%m.%Y"),
                reader['active_loans'],
                reader['overdue']
            ))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        self.readers_count_label.configure(text=f"–í—Å–µ–≥–æ: {len(readers)}")

    def show_add_reader_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—è"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è")
        dialog.geometry("450x450")  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        dialog.minsize(450, 400)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        dialog.transient(self)
        dialog.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        dialog.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
        y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

        ctk.CTkLabel(dialog, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=15)

        form_frame = ctk.CTkFrame(dialog)
        form_frame.pack(fill="both", expand=True, padx=20, pady=10)

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        ctk.CTkLabel(form_frame, text="–§–ò–û:*").pack(anchor="w", pady=(10, 0))
        name_entry = ctk.CTkEntry(form_frame, height=35)
        name_entry.pack(fill="x", pady=5)

        ctk.CTkLabel(form_frame, text="Email:*").pack(anchor="w", pady=(10, 0))
        email_entry = ctk.CTkEntry(form_frame, height=35)
        email_entry.pack(fill="x", pady=5)

        ctk.CTkLabel(form_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:").pack(anchor="w", pady=(10, 0))
        phone_entry = ctk.CTkEntry(form_frame, height=35)
        phone_entry.pack(fill="x", pady=5)

        def save_reader():
            name = name_entry.get().strip()
            email = email_entry.get().strip()
            phone = phone_entry.get().strip() or None

            if not name or not email:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–§–ò–û –∏ Email)")
                return

            try:
                result = db.create_reader(self.session, name, email, phone)
                if result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–∏—Ç–∞—Ç–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    dialog.destroy()
                    self.load_readers()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è: {e}")

        # –ö–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ—Ä–µ–π–º–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
        btn_frame = ctk.CTkFrame(dialog)
        btn_frame.pack(fill="x", padx=20, pady=15)

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_reader,
                      width=100).pack(side="right")

    def show_edit_reader_dialog(self):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—è"""
        selected = self.readers_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Ç–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        item = self.readers_tree.item(selected[0])
        reader_id = item['values'][0]

        try:
            reader = db.get_reader_by_id(self.session, reader_id)
            if not reader:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ß–∏—Ç–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            dialog = ctk.CTkToplevel(self)
            dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è")
            dialog.geometry("450x450")
            dialog.minsize(450, 400)
            dialog.transient(self)
            dialog.grab_set()

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            dialog.update_idletasks()
            x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
            y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
            dialog.geometry(f"+{x}+{y}")

            ctk.CTkLabel(dialog, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è",
                         font=ctk.CTkFont(size=16, weight="bold")).pack(pady=15)

            form_frame = ctk.CTkFrame(dialog)
            form_frame.pack(fill="both", expand=True, padx=20, pady=10)

            # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
            ctk.CTkLabel(form_frame, text="–§–ò–û:*").pack(anchor="w", pady=(10, 0))
            name_entry = ctk.CTkEntry(form_frame, height=35)
            name_entry.insert(0, reader.name)
            name_entry.pack(fill="x", pady=5)

            ctk.CTkLabel(form_frame, text="Email:*").pack(anchor="w", pady=(10, 0))
            email_entry = ctk.CTkEntry(form_frame, height=35)
            email_entry.insert(0, reader.email)
            email_entry.pack(fill="x", pady=5)

            ctk.CTkLabel(form_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:").pack(anchor="w", pady=(10, 0))
            phone_entry = ctk.CTkEntry(form_frame, height=35)
            if reader.phone_number:
                phone_entry.insert(0, reader.phone_number)
            phone_entry.pack(fill="x", pady=5)

            def save_changes():
                name = name_entry.get().strip()
                email = email_entry.get().strip()
                phone = phone_entry.get().strip() or None

                if not name or not email:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–§–ò–û –∏ Email)")
                    return

                try:
                    result = db.update_reader(self.session, reader_id, name=name, email=email, phone_number=phone)
                    if result:
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —á–∏—Ç–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                        dialog.destroy()
                        self.load_readers()
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

            # –ö–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ—Ä–µ–π–º–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
            btn_frame = ctk.CTkFrame(dialog)
            btn_frame.pack(fill="x", padx=20, pady=15)

            ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                          command=dialog.destroy,
                          width=100,
                          fg_color="gray").pack(side="left", padx=(0, 10))

            ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                          command=save_changes,
                          width=100).pack(side="right")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def delete_reader(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è"""
        selected = self.readers_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Ç–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        item = self.readers_tree.item(selected[0])
        reader_id = item['values'][0]
        reader_name = item['values'][1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏
        try:
            active_loans = db.get_loans_by_reader(self.session, reader_id, active_only=True)
            if active_loans:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                     f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è {reader_name}!\n"
                                     f"–£ –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏ –∫–Ω–∏–≥.")
                return
        except:
            pass

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è {reader_name}?"):
            return

        try:
            if db.delete_reader(self.session, reader_id):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–∏—Ç–∞—Ç–µ–ª—å {reader_name} —É–¥–∞–ª–µ–Ω")
                self.load_readers()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è: {e}")

    def load_loans(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞—á"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–¥–∞—á–∏
            loans = db.get_all_loans(self.session)

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –≤—ã–¥–∞—á–µ
            self.all_loans = []
            self.active_loans_count = 0
            self.overdue_loans_count = 0
            self.today_return_count = 0

            for loan in loans:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Ç–∞—Ç–µ–ª–µ
                reader = db.get_reader_by_id(self.session, loan.reader_id)
                reader_name = reader.name if reader else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –∏ –∫–Ω–∏–≥–µ
                copy = db.get_copy_by_id(self.session, loan.copy_id)
                if copy:
                    book = db.get_book_by_id(self.session, copy.book_id)
                    book_title = book.title if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    inventory_number = copy.inventory_number
                else:
                    book_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    inventory_number = "N/A"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if loan.returned:
                    status_text = "üü¶ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞"
                    status_color = ""
                else:
                    if loan.return_date < date.today():
                        status_text = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
                        status_color = "red"
                        self.overdue_loans_count += 1
                    elif (loan.return_date - date.today()).days <= 3:
                        status_text = "üü° –°–∫–æ—Ä–æ —Å—Ä–æ–∫"
                        status_color = "orange"
                    else:
                        status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞"
                        status_color = "green"

                    self.active_loans_count += 1

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å–µ–≥–æ–¥–Ω—è
                    if loan.return_date == date.today():
                        self.today_return_count += 1

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                issue_date = loan.loan_date.strftime("%d.%m.%Y") if loan.loan_date else "-"
                due_date = loan.return_date.strftime("%d.%m.%Y") if loan.return_date else "-"

                self.all_loans.append({
                    'id': loan.id,
                    'reader_name': reader_name,
                    'reader_id': loan.reader_id,
                    'book_title': book_title,
                    'inventory_number': inventory_number,
                    'issue_date': loan.loan_date,
                    'due_date': loan.return_date,
                    'actual_return_date': loan.actual_return_date,
                    'returned': loan.returned,
                    'status_text': status_text,
                    'status_color': status_color,
                    'copy_id': loan.copy_id,
                    'loan_obj': loan
                })

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_loans_stats()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
            self.apply_loans_filter(self.loans_filter.get())

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–¥–∞—á–∏: {e}")

    def update_loans_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–¥–∞—á"""
        self.active_loans_label.configure(text=f"–ê–∫—Ç–∏–≤–Ω—ã–µ: {self.active_loans_count}")
        self.overdue_loans_label.configure(text=f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ: {self.overdue_loans_count}")
        self.today_return_label.configure(text=f"–°–µ–≥–æ–¥–Ω—è –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: {self.today_return_count}")

    def apply_loans_filter(self, choice):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Å–ø–∏—Å–∫—É –≤—ã–¥–∞—á"""
        if not hasattr(self, 'all_loans'):
            return

        filtered_loans = []
        today = date.today()

        if choice == "–í—Å–µ –≤—ã–¥–∞—á–∏":
            filtered_loans = self.all_loans
        elif choice == "–ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏":
            filtered_loans = [loan for loan in self.all_loans if not loan['returned']]
        elif choice == "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ":
            filtered_loans = [loan for loan in self.all_loans
                              if not loan['returned'] and loan['due_date'] < today]
        elif choice == "–í–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–µ":
            filtered_loans = [loan for loan in self.all_loans if loan['returned']]
        elif choice == "–°–µ–≥–æ–¥–Ω—è –∫ –≤–æ–∑–≤—Ä–∞—Ç—É":
            filtered_loans = [loan for loan in self.all_loans
                              if not loan['returned'] and loan['due_date'] == today]

        self.display_loans(filtered_loans)

    def search_loans(self, event=None):
        """–ü–æ–∏—Å–∫ –ø–æ –≤—ã–¥–∞—á–∞–º"""
        search_term = self.loans_search.get().strip().lower()
        if not search_term:
            self.apply_loans_filter(self.loans_filter.get())
            return

        filtered_loans = []
        for loan in self.all_loans:
            if (search_term in loan['reader_name'].lower() or
                    search_term in loan['book_title'].lower() or
                    search_term in loan['inventory_number'].lower()):
                filtered_loans.append(loan)

        self.display_loans(filtered_loans)

    def display_loans(self, loans):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–¥–∞—á –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.loans_tree.get_children():
            self.loans_tree.delete(item)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for loan in loans:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            actions = ""
            if not loan['returned']:
                actions = "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å"

            self.loans_tree.insert("", "end", values=(
                loan['id'],
                loan['reader_name'],
                loan['book_title'],
                loan['inventory_number'],
                loan['issue_date'].strftime("%d.%m.%Y") if loan['issue_date'] else "-",
                loan['due_date'].strftime("%d.%m.%Y") if loan['due_date'] else "-",
                loan['status_text'],
                actions
            ))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        self.loans_count_label.configure(text=f"–í—Å–µ–≥–æ: {len(loans)}")

    def on_loan_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –≤—ã–¥–∞—á–µ"""
        selected = self.loans_tree.selection()
        if not selected:
            return

        item = self.loans_tree.item(selected[0])
        loan_id = item['values'][0]
        status = item['values'][6]

        # –ï—Å–ª–∏ –≤—ã–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å
        if "–ê–∫—Ç–∏–≤–Ω–∞" in status or "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞" in status or "–°–∫–æ—Ä–æ —Å—Ä–æ–∫" in status:
            self.show_return_book_dialog(loan_id)

    def show_issue_book_dialog(self):
        """–î–∏–∞–ª–æ–≥ –≤—ã–¥–∞—á–∏ –∫–Ω–∏–≥–∏ —á–∏—Ç–∞—Ç–µ–ª—é"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–í—ã–¥–∞—á–∞ –∫–Ω–∏–≥–∏")
        dialog.geometry("550x650")
        dialog.minsize(550, 650)
        dialog.transient(self)
        dialog.grab_set()

        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        ctk.CTkLabel(main_container, text="üìñ –í—ã–¥–∞—á–∞ –∫–Ω–∏–≥–∏ —á–∏—Ç–∞—Ç–µ–ª—é",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º—ã
        form_scrollable = ctk.CTkScrollableFrame(main_container)
        form_scrollable.pack(fill="both", expand=True)

        # === –í–´–ë–û–† –ß–ò–¢–ê–¢–ï–õ–Ø ===
        ctk.CTkLabel(form_scrollable, text="–ß–∏—Ç–∞—Ç–µ–ª—å:*",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 0))

        # –ü–æ–∏—Å–∫ —á–∏—Ç–∞—Ç–µ–ª—è
        reader_search_frame = ctk.CTkFrame(form_scrollable)
        reader_search_frame.pack(fill="x", pady=5)

        self.reader_search_entry = ctk.CTkEntry(
            reader_search_frame,
            placeholder_text="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É...",
            height=35
        )
        self.reader_search_entry.pack(side="left", fill="x", expand=True, padx=(0, 5))
        self.reader_search_entry.bind("<KeyRelease>", self.search_readers_for_issue)

        search_btn = ctk.CTkButton(
            reader_search_frame,
            text="üîç",
            width=40,
            command=lambda: self.search_readers_for_issue()
        )
        search_btn.pack(side="right")

        # –°–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π
        ctk.CTkLabel(form_scrollable, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:").pack(anchor="w", pady=(10, 0))

        readers_frame = ctk.CTkFrame(form_scrollable, height=120)
        readers_frame.pack(fill="x", pady=5)

        # Treeview –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π
        readers_tree_frame = ctk.CTkFrame(readers_frame)
        readers_tree_frame.pack(fill="both", expand=True, padx=5, pady=5)

        self.readers_issue_tree = ttk.Treeview(
            readers_tree_frame,
            columns=("ID", "Name", "Email", "Phone", "ActiveLoans"),
            show="headings",
            height=4
        )

        readers_columns = [
            ("ID", "ID", 50),
            ("Name", "–§–ò–û", 150),
            ("Email", "Email", 120),
            ("Phone", "–¢–µ–ª–µ—Ñ–æ–Ω", 100),
            ("ActiveLoans", "–ê–∫—Ç–∏–≤–Ω—ã–µ", 80)
        ]

        for col_id, heading, width in readers_columns:
            self.readers_issue_tree.heading(col_id, text=heading)
            self.readers_issue_tree.column(col_id, width=width)

        readers_scrollbar = ttk.Scrollbar(readers_tree_frame, orient="vertical", command=self.readers_issue_tree.yview)
        self.readers_issue_tree.configure(yscrollcommand=readers_scrollbar.set)

        self.readers_issue_tree.pack(side="left", fill="both", expand=True)
        readers_scrollbar.pack(side="right", fill="y")

        self.readers_issue_tree.bind("<<TreeviewSelect>>", self.on_reader_select)

        # === –í–´–ë–û–† –ö–ù–ò–ì–ò ===
        ctk.CTkLabel(form_scrollable, text="–ö–Ω–∏–≥–∞:*",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(20, 0))

        # –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏
        book_search_frame = ctk.CTkFrame(form_scrollable)
        book_search_frame.pack(fill="x", pady=5)

        self.book_search_entry = ctk.CTkEntry(
            book_search_frame,
            placeholder_text="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É...",
            height=35
        )
        self.book_search_entry.pack(side="left", fill="x", expand=True, padx=(0, 5))
        self.book_search_entry.bind("<KeyRelease>", self.search_books_for_issue)

        book_search_btn = ctk.CTkButton(
            book_search_frame,
            text="üîç",
            width=40,
            command=lambda: self.search_books_for_issue()
        )
        book_search_btn.pack(side="right")

        # –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        ctk.CTkLabel(form_scrollable, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:").pack(anchor="w", pady=(10, 0))

        books_frame = ctk.CTkFrame(form_scrollable, height=120)
        books_frame.pack(fill="x", pady=5)

        # Treeview –¥–ª—è –∫–Ω–∏–≥
        books_tree_frame = ctk.CTkFrame(books_frame)
        books_tree_frame.pack(fill="both", expand=True, padx=5, pady=5)

        self.books_issue_tree = ttk.Treeview(
            books_tree_frame,
            columns=("ID", "Title", "Author", "Available", "Total"),
            show="headings",
            height=4
        )

        books_columns = [
            ("ID", "ID", 50),
            ("Title", "–ù–∞–∑–≤–∞–Ω–∏–µ", 180),
            ("Author", "–ê–≤—Ç–æ—Ä", 120),
            ("Available", "–í –Ω–∞–ª–∏—á–∏–∏", 80),
            ("Total", "–í—Å–µ–≥–æ", 60)
        ]

        for col_id, heading, width in books_columns:
            self.books_issue_tree.heading(col_id, text=heading)
            self.books_issue_tree.column(col_id, width=width)

        books_scrollbar = ttk.Scrollbar(books_tree_frame, orient="vertical", command=self.books_issue_tree.yview)
        self.books_issue_tree.configure(yscrollcommand=books_scrollbar.set)

        self.books_issue_tree.pack(side="left", fill="both", expand=True)
        books_scrollbar.pack(side="right", fill="y")

        self.books_issue_tree.bind("<<TreeviewSelect>>", self.on_book_select)

        # === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–´–ë–†–ê–ù–ù–´–• ===
        info_frame = ctk.CTkFrame(form_scrollable)
        info_frame.pack(fill="x", pady=10)

        self.selected_reader_label = ctk.CTkLabel(info_frame, text="üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: –Ω–µ –≤—ã–±—Ä–∞–Ω",
                                                  font=ctk.CTkFont(weight="bold"))
        self.selected_reader_label.pack(anchor="w", pady=5)

        self.selected_book_label = ctk.CTkLabel(info_frame, text="üìö –ö–Ω–∏–≥–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                                                font=ctk.CTkFont(weight="bold"))
        self.selected_book_label.pack(anchor="w", pady=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–µ –∫–Ω–∏–≥
        self.limit_info_label = ctk.CTkLabel(info_frame, text="üìä –õ–∏–º–∏—Ç: –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –¥–æ 3 –∫–Ω–∏–≥",
                                             text_color="gray")
        self.limit_info_label.pack(anchor="w", pady=2)

        # === –°–†–û–ö –í–´–î–ê–ß–ò ===
        ctk.CTkLabel(form_scrollable, text="–°—Ä–æ–∫ –≤—ã–¥–∞—á–∏:*",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 0))

        days_frame = ctk.CTkFrame(form_scrollable)
        days_frame.pack(fill="x", pady=5)

        self.days_var = ctk.StringVar(value="14")
        days_options = ["7", "14", "21", "30"]

        for i, days in enumerate(days_options):
            btn = ctk.CTkRadioButton(
                days_frame,
                text=f"{days} –¥–Ω–µ–π",
                variable=self.days_var,
                value=days
            )
            btn.pack(side="left", padx=(0, 10))

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.selected_reader_id = None
        self.selected_book_id = None
        self.current_reader_loans_count = 0

        def issue_book():
            """–§—É–Ω–∫—Ü–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã–¥–∞—á–∏"""
            if not self.selected_reader_id:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Ç–∞—Ç–µ–ª—è")
                return

            if not self.selected_book_id:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É")
                return

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–Ω–∏–≥
                if self.current_reader_loans_count >= 3:
                    messagebox.showerror("–û—à–∏–±–∫–∞",
                                         f"–ß–∏—Ç–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç {self.current_reader_loans_count} –∫–Ω–∏–≥ –Ω–∞ —Ä—É–∫–∞—Ö.\n"
                                         f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç - 3 –∫–Ω–∏–≥–∏.")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–Ω–∏–≥–∏
                available_copies = db.get_available_copies(self.session, self.selected_book_id)
                if not available_copies:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —ç—Ç–æ–π –∫–Ω–∏–≥–∏")
                    return

                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
                copy = available_copies[0]
                days = int(self.days_var.get())

                # –°–æ–∑–¥–∞–µ–º –≤—ã–¥–∞—á—É
                result = db.create_loan(
                    self.session,
                    reader_id=self.selected_reader_id,
                    copy_id=copy.id,
                    librarian_id=self.current_user.id,
                    return_days=days
                )

                if result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö",
                                        f"–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞!\n"
                                        f"–ß–∏—Ç–∞—Ç–µ–ª—å: {self.selected_reader_label.cget('text').replace('üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: ', '')}\n"
                                        f"–ö–Ω–∏–≥–∞: {self.selected_book_label.cget('text').replace('üìö –ö–Ω–∏–≥–∞: ', '')}\n"
                                        f"–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.return_date.strftime('%d.%m.%Y')}\n"
                                        f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {copy.inventory_number}")

                    dialog.destroy()
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
                    self.load_loans()
                    if hasattr(self, 'load_books'):
                        self.load_books()
                    if hasattr(self, 'load_book_copies'):
                        self.load_book_copies()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–¥–∞—á—É")

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–Ω–∏–≥–∏: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(15, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        self.issue_btn = ctk.CTkButton(btn_frame, text="üìñ –í—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É",
                                       command=issue_book,
                                       width=120,
                                       state="disabled")
        self.issue_btn.pack(side="right")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.load_initial_readers_for_issue()
        self.load_initial_books_for_issue()

    def search_readers_for_issue(self, event=None):
        """–ü–æ–∏—Å–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–¥–∞—á–∏ (–ø–æ –∏–º–µ–Ω–∏, email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É)"""
        search_term = self.reader_search_entry.get().strip()

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π
            readers = db.search_readers(self.session, search_term) if search_term else db.get_all_readers(self.session,
                                                                                                          limit=50)

            # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—â–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ç–¥–µ–ª—å–Ω–æ
            if search_term and not readers:
                all_readers = db.get_all_readers(self.session)
                readers = [r for r in all_readers if r.phone_number and search_term in r.phone_number]

            # –û—á–∏—â–∞–µ–º treeview
            for item in self.readers_issue_tree.get_children():
                self.readers_issue_tree.delete(item)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
            for reader in readers:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏
                active_loans = db.get_loans_by_reader(self.session, reader.id, active_only=True)

                self.readers_issue_tree.insert("", "end", values=(
                    reader.id,
                    reader.name,
                    reader.email,
                    reader.phone_number or "-",
                    len(active_loans)
                ))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π: {e}")

    def load_initial_readers_for_issue(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        try:
            readers = db.get_all_readers(self.session, limit=30)

            for item in self.readers_issue_tree.get_children():
                self.readers_issue_tree.delete(item)

            for reader in readers:
                active_loans = db.get_loans_by_reader(self.session, reader.id, active_only=True)

                self.readers_issue_tree.insert("", "end", values=(
                    reader.id,
                    reader.name,
                    reader.email,
                    reader.phone_number or "-",
                    len(active_loans)
                ))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∏—Ç–∞—Ç–µ–ª–µ–π: {e}")

    def search_books_for_issue(self, event=None):
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –¥–ª—è –≤—ã–¥–∞—á–∏ (–ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –∞–≤—Ç–æ—Ä–µ)"""
        search_term = self.book_search_entry.get().strip().lower()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
            all_books = db.get_all_books(self.session)

            # –û—á–∏—â–∞–µ–º treeview
            for item in self.books_issue_tree.get_children():
                self.books_issue_tree.delete(item)

            if not search_term:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
                for book in all_books:
                    copies = db.get_copies_by_book(self.session, book.id)
                    available_copies = len([c for c in copies if c.available])

                    if available_copies > 0:
                        self.books_issue_tree.insert("", "end", values=(
                            book.id,
                            book.title,
                            book.author or "-",
                            available_copies,
                            len(copies)
                        ))
            else:
                # –ò—â–µ–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –∞–≤—Ç–æ—Ä–µ
                search_words = search_term.split()
                found_books = []

                for book in all_books:
                    copies = db.get_copies_by_book(self.session, book.id)
                    available_copies = len([c for c in copies if c.available])

                    if available_copies == 0:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º —Å–ª–æ–≤–∞–º –ø–æ–∏—Å–∫–∞
                    title_lower = (book.title or "").lower()
                    author_lower = (book.author or "").lower()

                    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –∏–∑ —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–µ
                    title_match = any(word in title_lower for word in search_words)
                    author_match = any(word in author_lower for word in search_words)

                    if title_match or author_match:
                        found_books.append((book, available_copies, len(copies)))

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
                found_books.sort(key=lambda x: (
                    sum(word in (x[0].title or "").lower() for word in search_words) +
                    sum(word in (x[0].author or "").lower() for word in search_words),
                    x[1]  # –∑–∞—Ç–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
                ), reverse=True)

                for book, available_copies, total_copies in found_books:
                    self.books_issue_tree.insert("", "end", values=(
                        book.id,
                        book.title,
                        book.author or "-",
                        available_copies,
                        total_copies
                    ))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥: {e}")

    def load_initial_books_for_issue(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
        try:
            books = db.get_all_books(self.session)

            for item in self.books_issue_tree.get_children():
                self.books_issue_tree.delete(item)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏
            for book in books:
                copies = db.get_copies_by_book(self.session, book.id)
                available_copies = len([c for c in copies if c.available])

                if available_copies > 0:
                    self.books_issue_tree.insert("", "end", values=(
                        book.id,
                        book.title,
                        book.author or "-",
                        available_copies,
                        len(copies)
                    ))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥: {e}")

    def on_reader_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∏—Ç–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–∞ –∫–Ω–∏–≥"""
        selected = self.readers_issue_tree.selection()
        if not selected:
            return

        item = self.readers_issue_tree.item(selected[0])
        self.selected_reader_id = item['values'][0]
        reader_name = item['values'][1]
        active_loans = item['values'][4]

        self.current_reader_loans_count = active_loans
        self.selected_reader_label.configure(text=f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {reader_name}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ
        remaining_books = 3 - active_loans
        if remaining_books > 0:
            self.limit_info_label.configure(
                text=f"üìä –õ–∏–º–∏—Ç: {active_loans}/3 –∫–Ω–∏–≥ (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –µ—â—ë {remaining_books})",
                text_color="green"
            )
        else:
            self.limit_info_label.configure(
                text=f"üìä –õ–∏–º–∏—Ç: {active_loans}/3 –∫–Ω–∏–≥ (–ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!)",
                text_color="red"
            )

        self.update_issue_button_state()

    def on_book_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
        selected = self.books_issue_tree.selection()
        if not selected:
            return

        item = self.books_issue_tree.item(selected[0])
        self.selected_book_id = item['values'][0]
        book_title = item['values'][1]
        book_author = item['values'][2]

        self.selected_book_label.configure(text=f"üìö –ö–Ω–∏–≥–∞: {book_title} ({book_author})")
        self.update_issue_button_state()

    def update_issue_button_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–¥–∞—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–∞"""
        if (self.selected_reader_id and self.selected_book_id and
                self.current_reader_loans_count < 3):
            self.issue_btn.configure(state="normal")
        else:
            self.issue_btn.configure(state="disabled")

    def show_return_book_dialog(self, loan_id=None):
        """–î–∏–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–Ω–∏–≥–∏"""
        # –ï—Å–ª–∏ loan_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        if loan_id is None:
            selected = self.loans_tree.selection()
            if not selected:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–¥–∞—á—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
                return
            loan_id = self.loans_tree.item(selected[0])['values'][0]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ
            loan = db.get_loan_by_id(self.session, loan_id)
            if not loan:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            if loan.returned:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            reader = db.get_reader_by_id(self.session, loan.reader_id)
            copy = db.get_copy_by_id(self.session, loan.copy_id)
            book = db.get_book_by_id(self.session, copy.book_id) if copy else None

            dialog = ctk.CTkToplevel(self)
            dialog.title("–í–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏")
            dialog.geometry("500x450")
            dialog.minsize(500, 550)
            dialog.transient(self)
            dialog.grab_set()

            self.center_dialog(dialog)

            # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            main_container = ctk.CTkFrame(dialog)
            main_container.pack(fill="both", expand=True, padx=20, pady=15)

            ctk.CTkLabel(main_container, text="‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏",
                         font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–∞—á–µ
            info_frame = ctk.CTkFrame(main_container)
            info_frame.pack(fill="x", pady=10)

            ctk.CTkLabel(info_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–∞—á–µ:",
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info_text = f"""
    üìñ –ö–Ω–∏–≥–∞: {book.title if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
    üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {reader.name if reader else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
    üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {loan.loan_date.strftime('%d.%m.%Y')}
    üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {loan.return_date.strftime('%d.%m.%Y')}
    üî¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {copy.inventory_number if copy else "N/A"}
            """

            if loan.return_date < date.today():
                overdue_days = (date.today() - loan.return_date).days
                info_text += f"\n‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {overdue_days} –¥–Ω–µ–π"
                info_text += f"\nüí∞ –í–æ–∑–º–æ–∂–Ω—ã–π —à—Ç—Ä–∞—Ñ: {overdue_days * 10} —Ä—É–±."

            info_label = ctk.CTkLabel(info_frame, text=info_text, justify="left")
            info_label.pack(anchor="w", pady=10, padx=10)

            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
            ctk.CTkLabel(main_container, text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ:",
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 0))

            condition_frame = ctk.CTkFrame(main_container)
            condition_frame.pack(fill="x", pady=5)

            self.return_condition_var = ctk.StringVar(value=copy.condition if copy else "–•–æ—Ä–æ—à–µ–µ")
            conditions = ["–û—Ç–ª–∏—á–Ω–æ–µ", "–•–æ—Ä–æ—à–µ–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "–ü–ª–æ—Ö–æ–µ", "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∞"]

            condition_combo = ctk.CTkComboBox(condition_frame, values=conditions,
                                              variable=self.return_condition_var)
            condition_combo.pack(fill="x", pady=5)

            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
            ctk.CTkLabel(main_container, text="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):").pack(anchor="w", pady=(10, 0))
            note_entry = ctk.CTkEntry(main_container, height=35, placeholder_text="–ó–∞–º–µ—Ç–∫–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–Ω–∏–≥–∏...")
            note_entry.pack(fill="x", pady=5)

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞
            create_fine_var = ctk.BooleanVar(value=True)

            if loan.return_date >= date.today():
                create_fine_var.set(False)  # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–∫–∏

            fine_check = ctk.CTkCheckBox(main_container,
                                         text="–°–æ–∑–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)",
                                         variable=create_fine_var)
            fine_check.pack(anchor="w", pady=10)

            def process_return():
                try:
                    condition = self.return_condition_var.get()
                    note = note_entry.get().strip() or None

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–∏–≥—É
                    result = db.return_loan(self.session, loan_id)
                    if not result:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç")
                        return

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
                    if copy:
                        db.update_copy(self.session, copy.id, condition=condition)

                    # –°–æ–∑–¥–∞–µ–º —à—Ç—Ä–∞—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∞ –∏ –æ—Ç–º–µ—á–µ–Ω–∞ –≥–∞–ª–æ—á–∫–∞
                    if create_fine_var.get() and loan.return_date < date.today():
                        overdue_days = (date.today() - loan.return_date).days
                        fine_amount = overdue_days * 10  # 10 —Ä—É–±. –≤ –¥–µ–Ω—å

                        fine_result = db.create_fine(
                            self.session,
                            loan_id,
                            self.current_user.id,
                            fine_amount
                        )

                        if fine_result:
                            messagebox.showinfo("–£—Å–ø–µ—Ö",
                                                f"–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞!\n"
                                                f"–°–æ–∑–¥–∞–Ω —à—Ç—Ä–∞—Ñ: {fine_amount} —Ä—É–±. –∑–∞ {overdue_days} –¥–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏")
                        else:
                            messagebox.showinfo("–£—Å–ø–µ—Ö",
                                                f"–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞!\n"
                                                f"–®—Ç—Ä–∞—Ñ –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                    else:
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞!")

                    dialog.destroy()

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    self.load_loans()
                    if hasattr(self, 'load_books'):
                        self.load_books()
                    if hasattr(self, 'load_book_copies'):
                        self.load_book_copies()

                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫–Ω–∏–≥–∏: {e}")

            # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
            btn_frame = ctk.CTkFrame(main_container)
            btn_frame.pack(fill="x", pady=(15, 0))

            ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                          command=dialog.destroy,
                          width=100,
                          fg_color="gray").pack(side="left", padx=(0, 10))

            ctk.CTkButton(btn_frame, text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç",
                          command=process_return,
                          width=140,
                          fg_color="#7209B7").pack(side="right")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")

    def show_extend_loan_dialog(self):
        """–î–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≤—ã–¥–∞—á–∏"""
        selected = self.loans_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–¥–∞—á—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
            return

        loan_id = self.loans_tree.item(selected[0])['values'][0]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ
            loan = db.get_loan_by_id(self.session, loan_id)
            if not loan:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            if loan.returned:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            current_return_date = loan.return_date
            original_return_date = current_return_date

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            reader = db.get_reader_by_id(self.session, loan.reader_id)
            copy = db.get_copy_by_id(self.session, loan.copy_id)
            book = db.get_book_by_id(self.session, copy.book_id) if copy else None

            dialog = ctk.CTkToplevel(self)
            dialog.title("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞")
            dialog.geometry("500x500")
            dialog.minsize(500, 650)
            dialog.transient(self)
            dialog.grab_set()

            self.center_dialog(dialog)

            # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            main_container = ctk.CTkFrame(dialog)
            main_container.pack(fill="both", expand=True, padx=20, pady=15)

            ctk.CTkLabel(main_container, text="üìÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –≤—ã–¥–∞—á–∏",
                         font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–∞—á–µ
            info_frame = ctk.CTkFrame(main_container)
            info_frame.pack(fill="x", pady=10)

            ctk.CTkLabel(info_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–∞—á–µ:",
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info_text = f"""
    üìñ –ö–Ω–∏–≥–∞: {book.title if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
    üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {reader.name if reader else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
    üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {loan.loan_date.strftime('%d.%m.%Y')}
    üìÖ –¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫: {current_return_date.strftime('%d.%m.%Y')}
            """

            if current_return_date < date.today():
                overdue_days = (date.today() - current_return_date).days
                info_text += f"\n‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {overdue_days} –¥–Ω–µ–π"

            info_label = ctk.CTkLabel(info_frame, text=info_text, justify="left")
            info_label.pack(anchor="w", pady=10, padx=10)

            # –í—ã–±–æ—Ä —Å—Ä–æ–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            ctk.CTkLabel(main_container, text="–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞:*",
                         font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 0))

            days_frame = ctk.CTkFrame(main_container)
            days_frame.pack(fill="x", pady=5)

            self.extend_days_var = ctk.StringVar(value="7")
            days_options = [
                ("+7 –¥–Ω–µ–π", "7"),
                ("+14 –¥–Ω–µ–π", "14"),
                ("+21 –¥–µ–Ω—å", "21"),
                ("+1 –º–µ—Å—è—Ü", "30")
            ]

            for i, (text, value) in enumerate(days_options):
                btn = ctk.CTkRadioButton(
                    days_frame,
                    text=text,
                    variable=self.extend_days_var,
                    value=value
                )
                btn.pack(side="left", padx=(0, 10))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º —Å—Ä–æ–∫–µ
            new_date_frame = ctk.CTkFrame(main_container)
            new_date_frame.pack(fill="x", pady=10)

            def update_new_date(*args):
                try:
                    days = int(self.extend_days_var.get())
                    new_return_date = current_return_date + timedelta(days=days)
                    new_date_label.configure(
                        text=f"üìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {new_return_date.strftime('%d.%m.%Y')}"
                    )
                except:
                    pass

            self.extend_days_var.trace('w', update_new_date)

            new_date_label = ctk.CTkLabel(new_date_frame,
                                          text="üìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: ...",
                                          font=ctk.CTkFont(weight="bold"))
            new_date_label.pack(pady=5)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
            update_new_date()

            # –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            ctk.CTkLabel(main_container, text="–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):").pack(anchor="w", pady=(10, 0))
            reason_entry = ctk.CTkEntry(main_container, height=35, placeholder_text="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è...")
            reason_entry.pack(fill="x", pady=5)

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            restrictions_frame = ctk.CTkFrame(main_container)
            restrictions_frame.pack(fill="x", pady=10)

            restrictions_text = """
    ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
    ‚Ä¢ –ü—Ä–æ–¥–ª–µ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 2 —Ä–∞–∑–∞
    ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—â–∏–π —Å—Ä–æ–∫ - 60 –¥–Ω–µ–π
    ‚Ä¢ –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –∫–Ω–∏–≥–∏ —Å –±–æ–ª—å—à–∏–º–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º–∏
            """
            ctk.CTkLabel(restrictions_frame, text=restrictions_text,
                         justify="left", text_color="orange").pack(pady=5)

            def process_extension():
                try:
                    days = int(self.extend_days_var.get())
                    reason = reason_entry.get().strip() or None
                    new_return_date = current_return_date + timedelta(days=days)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                    total_days = (new_return_date - loan.loan_date).days
                    if total_days > 60:
                        messagebox.showerror("–û—à–∏–±–∫–∞",
                                             f"–û–±—â–∏–π —Å—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 60 –¥–Ω–µ–π.\n"
                                             f"–¢–µ–∫—É—â–∏–π –æ–±—â–∏–π —Å—Ä–æ–∫: {total_days} –¥–Ω–µ–π")
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à—É—é –ø—Ä–æ—Å—Ä–æ—á–∫—É
                    if current_return_date < date.today():
                        overdue_days = (date.today() - current_return_date).days
                        if overdue_days > 30:
                            messagebox.showerror("–û—à–∏–±–∫–∞",
                                                 f"–ù–µ–ª—å–∑—è –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –∫–Ω–∏–≥–∏ —Å –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π –±–æ–ª–µ–µ 30 –¥–Ω–µ–π.\n"
                                                 f"–¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å—Ä–æ—á–∫–∞: {overdue_days} –¥–Ω–µ–π")
                            return

                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                    result = db.update_loan(self.session, loan_id, return_date=new_return_date)
                    if result:
                        messagebox.showinfo("–£—Å–ø–µ—Ö",
                                            f"–°—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!\n"
                                            f"–ù–æ–≤—ã–π —Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {new_return_date.strftime('%d.%m.%Y')}\n"
                                            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π: {days}")

                        dialog.destroy()

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        self.load_loans()

                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
                        log_msg = f"–ü—Ä–æ–¥–ª–µ–Ω–∞ –≤—ã–¥–∞—á–∞ ID {loan_id}: {current_return_date.strftime('%d.%m.%Y')} -> {new_return_date.strftime('%d.%m.%Y')}"
                        if reason:
                            log_msg += f" (–ü—Ä–∏—á–∏–Ω–∞: {reason})"
                        print(log_msg)

                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫")

                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞: {e}")

            # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
            btn_frame = ctk.CTkFrame(main_container)
            btn_frame.pack(fill="x", pady=(15, 0))

            ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                          command=dialog.destroy,
                          width=100,
                          fg_color="gray").pack(side="left", padx=(0, 10))

            ctk.CTkButton(btn_frame, text="‚úÖ –ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫",
                          command=process_extension,
                          width=120,
                          fg_color="#4CC9F0").pack(side="right")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")

    def load_fines(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à—Ç—Ä–∞—Ñ—ã
            fines = db.get_all_fines(self.session)

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —à—Ç—Ä–∞—Ñ–µ
            self.all_fines = []
            self.total_fines_count = 0
            self.unpaid_fines_count = 0
            self.total_amount_sum = 0
            self.unpaid_amount_sum = 0

            for fine in fines:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ
                loan = db.get_loan_by_id(self.session, fine.loan_id)
                if not loan:
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Ç–∞—Ç–µ–ª–µ
                reader = db.get_reader_by_id(self.session, loan.reader_id)
                reader_name = reader.name if reader else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –∏ –∫–Ω–∏–≥–µ
                copy = db.get_copy_by_id(self.session, loan.copy_id)
                if copy:
                    book = db.get_book_by_id(self.session, copy.book_id)
                    book_title = book.title if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                else:
                    book_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä–µ
                librarian = db.get_librarian_by_id(self.session, fine.librarian_id)
                librarian_name = librarian.name if librarian else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if fine.paid:
                    status_text = "‚úÖ –û–ø–ª–∞—á–µ–Ω"
                    status_color = "green"
                else:
                    status_text = "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω"
                    status_color = "red"
                    self.unpaid_fines_count += 1
                    self.unpaid_amount_sum += fine.amount

                self.total_fines_count += 1
                self.total_amount_sum += fine.amount

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                issued_date = fine.issued_date.strftime("%d.%m.%Y") if fine.issued_date else "-"

                self.all_fines.append({
                    'id': fine.id,
                    'reader_name': reader_name,
                    'book_title': book_title,
                    'amount': fine.amount,
                    'issued_date': fine.issued_date,
                    'status_text': status_text,
                    'status_color': status_color,
                    'loan_id': fine.loan_id,
                    'librarian_name': librarian_name,
                    'paid': fine.paid,
                    'fine_obj': fine
                })

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_fines_stats()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
            self.apply_fines_filter(self.fines_filter.get())

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ç—Ä–∞—Ñ—ã: {e}")

    def update_fines_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤"""
        self.total_fines_label.configure(text=f"–í—Å–µ–≥–æ —à—Ç—Ä–∞—Ñ–æ–≤: {self.total_fines_count}")
        self.unpaid_fines_label.configure(text=f"–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {self.unpaid_fines_count}")
        self.total_amount_label.configure(text=f"–û–±—â–∞—è —Å—É–º–º–∞: {self.total_amount_sum} —Ä—É–±.")
        self.unpaid_amount_label.configure(text=f"–°—É–º–º–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {self.unpaid_amount_sum} —Ä—É–±.")

    def apply_fines_filter(self, choice):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Å–ø–∏—Å–∫—É —à—Ç—Ä–∞—Ñ–æ–≤"""
        if not hasattr(self, 'all_fines'):
            return

        filtered_fines = []
        today = date.today()

        if choice == "–í—Å–µ —à—Ç—Ä–∞—Ñ—ã":
            filtered_fines = self.all_fines
        elif choice == "–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ":
            filtered_fines = [fine for fine in self.all_fines if not fine['paid']]
        elif choice == "–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ":
            filtered_fines = [fine for fine in self.all_fines if fine['paid']]
        elif choice == "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é":
            week_ago = today - timedelta(days=7)
            filtered_fines = [fine for fine in self.all_fines
                              if fine['issued_date'] and fine['issued_date'] >= week_ago]
        elif choice == "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü":
            month_ago = today - timedelta(days=30)
            filtered_fines = [fine for fine in self.all_fines
                              if fine['issued_date'] and fine['issued_date'] >= month_ago]

        self.display_fines(filtered_fines)

    def search_fines(self, event=None):
        """–ü–æ–∏—Å–∫ –ø–æ —à—Ç—Ä–∞—Ñ–∞–º"""
        search_term = self.fines_search.get().strip().lower()
        if not search_term:
            self.apply_fines_filter(self.fines_filter.get())
            return

        filtered_fines = []
        for fine in self.all_fines:
            if (search_term in fine['reader_name'].lower() or
                    search_term in fine['book_title'].lower() or
                    search_term in str(fine['amount']) or
                    search_term in str(fine['loan_id'])):
                filtered_fines.append(fine)

        self.display_fines(filtered_fines)

    def display_fines(self, fines):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.fines_tree.get_children():
            self.fines_tree.delete(item)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for fine in fines:
            self.fines_tree.insert("", "end", values=(
                fine['id'],
                fine['reader_name'],
                fine['book_title'],
                f"{fine['amount']} —Ä—É–±.",
                fine['issued_date'].strftime("%d.%m.%Y") if fine['issued_date'] else "-",
                fine['status_text'],
                fine['loan_id'],
                fine['librarian_name']
            ))

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if not fine['paid']:
                self.fines_tree.set(self.fines_tree.get_children()[-1], "Status", fine['status_text'])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        self.fines_count_label.configure(text=f"–í—Å–µ–≥–æ: {len(fines)}")

    def on_fine_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —à—Ç—Ä–∞—Ñ—É"""
        selected = self.fines_tree.selection()
        if not selected:
            return

        item = self.fines_tree.item(selected[0])
        fine_id = item['values'][0]
        status = item['values'][5]

        # –ï—Å–ª–∏ —à—Ç—Ä–∞—Ñ –Ω–µ –æ–ø–ª–∞—á–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É
        if "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω" in status:
            self.mark_fine_paid(fine_id)

    def show_create_fine_dialog(self):
        """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–°–æ–∑–¥–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞")
        dialog.geometry("600x600")
        dialog.minsize(600, 600)
        dialog.transient(self)
        dialog.grab_set()

        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        ctk.CTkLabel(main_container, text="üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º—ã
        form_scrollable = ctk.CTkScrollableFrame(main_container)
        form_scrollable.pack(fill="both", expand=True)

        # === –í–´–ë–û–† –í–´–î–ê–ß–ò ===
        ctk.CTkLabel(form_scrollable, text="–í—ã–¥–∞—á–∞:*",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 0))

        # –ü–æ–∏—Å–∫ –≤—ã–¥–∞—á–∏
        loan_search_frame = ctk.CTkFrame(form_scrollable)
        loan_search_frame.pack(fill="x", pady=5)

        self.loan_search_entry = ctk.CTkEntry(
            loan_search_frame,
            placeholder_text="–ü–æ–∏—Å–∫ –ø–æ —á–∏—Ç–∞—Ç–µ–ª—é, –∫–Ω–∏–≥–µ –∏–ª–∏ ID –≤—ã–¥–∞—á–∏...",
            height=35
        )
        self.loan_search_entry.pack(side="left", fill="x", expand=True, padx=(0, 5))
        self.loan_search_entry.bind("<KeyRelease>", self.search_loans_for_fine)

        search_btn = ctk.CTkButton(
            loan_search_frame,
            text="üîç",
            width=40,
            command=lambda: self.search_loans_for_fine()
        )
        search_btn.pack(side="right")

        # –°–ø–∏—Å–æ–∫ –≤—ã–¥–∞—á
        ctk.CTkLabel(form_scrollable, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:").pack(anchor="w", pady=(10, 0))

        loans_frame = ctk.CTkFrame(form_scrollable, height=150)
        loans_frame.pack(fill="x", pady=5)

        # Treeview –¥–ª—è –≤—ã–¥–∞—á
        loans_tree_frame = ctk.CTkFrame(loans_frame)
        loans_tree_frame.pack(fill="both", expand=True, padx=5, pady=5)

        self.loans_fine_tree = ttk.Treeview(
            loans_tree_frame,
            columns=("ID", "Reader", "Book", "IssueDate", "DueDate", "Status"),
            show="headings",
            height=5
        )

        loans_columns = [
            ("ID", "ID", 60),
            ("Reader", "–ß–∏—Ç–∞—Ç–µ–ª—å", 150),
            ("Book", "–ö–Ω–∏–≥–∞", 180),
            ("IssueDate", "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏", 100),
            ("DueDate", "–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞", 100),
            ("Status", "–°—Ç–∞—Ç—É—Å", 100)
        ]

        for col_id, heading, width in loans_columns:
            self.loans_fine_tree.heading(col_id, text=heading)
            self.loans_fine_tree.column(col_id, width=width)

        loans_scrollbar = ttk.Scrollbar(loans_tree_frame, orient="vertical", command=self.loans_fine_tree.yview)
        self.loans_fine_tree.configure(yscrollcommand=loans_scrollbar.set)

        self.loans_fine_tree.pack(side="left", fill="both", expand=True)
        loans_scrollbar.pack(side="right", fill="y")

        self.loans_fine_tree.bind("<<TreeviewSelect>>", self.on_loan_select_for_fine)

        # === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–´–ë–†–ê–ù–ù–û–ô –í–´–î–ê–ß–ï ===
        info_frame = ctk.CTkFrame(form_scrollable)
        info_frame.pack(fill="x", pady=10)

        self.selected_loan_label = ctk.CTkLabel(info_frame, text="üìã –í—ã–¥–∞—á–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                                                font=ctk.CTkFont(weight="bold"))
        self.selected_loan_label.pack(anchor="w", pady=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ
        self.overdue_info_label = ctk.CTkLabel(info_frame, text="üìÖ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: -",
                                               text_color="gray")
        self.overdue_info_label.pack(anchor="w", pady=2)

        # === –ü–ê–†–ê–ú–ï–¢–†–´ –®–¢–†–ê–§–ê ===
        ctk.CTkLabel(form_scrollable, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à—Ç—Ä–∞—Ñ–∞:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(20, 0))

        # –°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞
        amount_frame = ctk.CTkFrame(form_scrollable)
        amount_frame.pack(fill="x", pady=5)

        ctk.CTkLabel(amount_frame, text="–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞ (—Ä—É–±.):*").pack(side="left")

        self.fine_amount_entry = ctk.CTkEntry(amount_frame, width=100)
        self.fine_amount_entry.insert(0, "100")
        self.fine_amount_entry.pack(side="right")

        # –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ —à—Ç—Ä–∞—Ñ–∞
        date_frame = ctk.CTkFrame(form_scrollable)
        date_frame.pack(fill="x", pady=5)

        ctk.CTkLabel(date_frame, text="–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ —à—Ç—Ä–∞—Ñ–∞:*").pack(side="left")

        self.fine_date_entry = ctk.CTkEntry(date_frame, width=120)
        self.fine_date_entry.insert(0, date.today().strftime("%d.%m.%Y"))
        self.fine_date_entry.pack(side="right")

        # –ü—Ä–∏—á–∏–Ω–∞ —à—Ç—Ä–∞—Ñ–∞
        ctk.CTkLabel(form_scrollable, text="–ü—Ä–∏—á–∏–Ω–∞ —à—Ç—Ä–∞—Ñ–∞:").pack(anchor="w", pady=(10, 0))
        reason_entry = ctk.CTkEntry(form_scrollable, height=35,
                                    placeholder_text="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —à—Ç—Ä–∞—Ñ–∞...")
        reason_entry.pack(fill="x", pady=5)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.selected_loan_id = None
        self.selected_loan_due_date = None

        def create_fine():
            """–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞"""
            if not self.selected_loan_id:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–¥–∞—á—É")
                return

            try:
                amount = float(self.fine_amount_entry.get().strip())
                if amount <= 0:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                    return

                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                date_str = self.fine_date_entry.get().strip()
                try:
                    issued_date = datetime.strptime(date_str, "%d.%m.%Y").date()
                except ValueError:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                    return

                reason = reason_entry.get().strip() or None

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —à—Ç—Ä–∞—Ñ–∞ –¥–ª—è —ç—Ç–æ–π –≤—ã–¥–∞—á–∏
                existing_fine = db.get_fine_by_loan(self.session, self.selected_loan_id)
                if existing_fine:
                    messagebox.showerror("–û—à–∏–±–∫–∞",
                                         f"–î–ª—è —ç—Ç–æ–π –≤—ã–¥–∞—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —à—Ç—Ä–∞—Ñ (ID: {existing_fine.id})")
                    return

                # –°–æ–∑–¥–∞–µ–º —à—Ç—Ä–∞—Ñ
                result = db.create_fine(
                    self.session,
                    loan_id=self.selected_loan_id,
                    librarian_id=self.current_user.id,
                    amount=amount,
                    issued_date=issued_date
                )

                if result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö",
                                        f"–®—Ç—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                                        f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
                                        f"–ß–∏—Ç–∞—Ç–µ–ª—å: {self.selected_loan_label.cget('text').replace('üìã –í—ã–¥–∞—á–∞: ', '')}")

                    dialog.destroy()
                    self.load_fines()

                    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞
                    log_msg = f"–°–æ–∑–¥–∞–Ω —à—Ç—Ä–∞—Ñ ID {result.id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±. –¥–ª—è –≤—ã–¥–∞—á–∏ ID {self.selected_loan_id}"
                    if reason:
                        log_msg += f" (–ü—Ä–∏—á–∏–Ω–∞: {reason})"
                    print(log_msg)

                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ")

            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ —à—Ç—Ä–∞—Ñ–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–∞: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(15, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        self.create_fine_btn = ctk.CTkButton(btn_frame, text="üí∞ –°–æ–∑–¥–∞—Ç—å —à—Ç—Ä–∞—Ñ",
                                             command=create_fine,
                                             width=120,
                                             state="disabled")
        self.create_fine_btn.pack(side="right")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.load_initial_loans_for_fine()

    def search_loans_for_fine(self, event=None):
        """–ü–æ–∏—Å–∫ –≤—ã–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞"""
        search_term = self.loan_search_entry.get().strip()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–¥–∞—á–∏
            all_loans = db.get_all_loans(self.session)

            # –û—á–∏—â–∞–µ–º treeview
            for item in self.loans_fine_tree.get_children():
                self.loans_fine_tree.delete(item)

            found_loans = []

            for loan in all_loans:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Ç–∞—Ç–µ–ª–µ
                reader = db.get_reader_by_id(self.session, loan.reader_id)
                if not reader:
                    continue

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
                copy = db.get_copy_by_id(self.session, loan.copy_id)
                if copy:
                    book = db.get_book_by_id(self.session, copy.book_id)
                    book_title = book.title if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                else:
                    book_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if loan.returned:
                    status_text = "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞"
                else:
                    if loan.return_date < date.today():
                        status_text = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
                    else:
                        status_text = "–ê–∫—Ç–∏–≤–Ω–∞"

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                issue_date = loan.loan_date.strftime("%d.%m.%Y") if loan.loan_date else "-"
                due_date = loan.return_date.strftime("%d.%m.%Y") if loan.return_date else "-"

                loan_info = {
                    'loan': loan,
                    'reader_name': reader.name,
                    'book_title': book_title,
                    'issue_date': issue_date,
                    'due_date': due_date,
                    'status': status_text
                }

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
                if not search_term or (
                        search_term in str(loan.id) or
                        search_term.lower() in reader.name.lower() or
                        search_term.lower() in book_title.lower()
                ):
                    found_loans.append(loan_info)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
            found_loans.sort(key=lambda x: (x['status'] != "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞", x['status'] != "–ê–∫—Ç–∏–≤–Ω–∞"))

            for loan_info in found_loans:
                self.loans_fine_tree.insert("", "end", values=(
                    loan_info['loan'].id,
                    loan_info['reader_name'],
                    loan_info['book_title'],
                    loan_info['issue_date'],
                    loan_info['due_date'],
                    loan_info['status']
                ))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—ã–¥–∞—á: {e}")

    def load_initial_loans_for_fine(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞—á"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –≤—ã–¥–∞—á–∏
            active_loans = db.get_active_loans(self.session)
            overdue_loans = db.get_overdue_loans(self.session)

            all_loans = overdue_loans + active_loans

            for item in self.loans_fine_tree.get_children():
                self.loans_fine_tree.delete(item)

            for loan in all_loans:
                reader = db.get_reader_by_id(self.session, loan.reader_id)
                if not reader:
                    continue

                copy = db.get_copy_by_id(self.session, loan.copy_id)
                if copy:
                    book = db.get_book_by_id(self.session, copy.book_id)
                    book_title = book.title if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                else:
                    book_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                if loan.returned:
                    status_text = "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞"
                else:
                    if loan.return_date < date.today():
                        status_text = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
                    else:
                        status_text = "–ê–∫—Ç–∏–≤–Ω–∞"

                issue_date = loan.loan_date.strftime("%d.%m.%Y") if loan.loan_date else "-"
                due_date = loan.return_date.strftime("%d.%m.%Y") if loan.return_date else "-"

                self.loans_fine_tree.insert("", "end", values=(
                    loan.id,
                    reader.name,
                    book_title,
                    issue_date,
                    due_date,
                    status_text
                ))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–¥–∞—á: {e}")

    def on_loan_select_for_fine(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—ã–¥–∞—á–∏ –¥–ª—è —à—Ç—Ä–∞—Ñ–∞"""
        selected = self.loans_fine_tree.selection()
        if not selected:
            return

        item = self.loans_fine_tree.item(selected[0])
        self.selected_loan_id = item['values'][0]
        reader_name = item['values'][1]
        book_title = item['values'][2]
        due_date = item['values'][4]
        status = item['values'][5]

        self.selected_loan_label.configure(
            text=f"üìã –í—ã–¥–∞—á–∞: {reader_name} - {book_title}"
        )

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
        if status == "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞":
            try:
                due_date_obj = datetime.strptime(due_date, "%d.%m.%Y").date()
                overdue_days = (date.today() - due_date_obj).days
                self.overdue_info_label.configure(
                    text=f"üìÖ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {overdue_days} –¥–Ω–µ–π",
                    text_color="red"
                )
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞
                auto_fine = overdue_days * 10  # 10 —Ä—É–±. –≤ –¥–µ–Ω—å
                self.fine_amount_entry.delete(0, "end")
                self.fine_amount_entry.insert(0, str(auto_fine))
            except:
                self.overdue_info_label.configure(text="üìÖ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: -")
        else:
            self.overdue_info_label.configure(text="üìÖ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: –Ω–µ—Ç")

        self.create_fine_btn.configure(state="normal")

    def mark_fine_paid(self, fine_id=None):
        """–û—Ç–º–µ—Ç–∫–∞ —à—Ç—Ä–∞—Ñ–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ"""
        if fine_id is None:
            selected = self.fines_tree.selection()
            if not selected:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ç—Ä–∞—Ñ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã")
                return
            fine_id = self.fines_tree.item(selected[0])['values'][0]

        try:
            fine = db.get_fine_by_id(self.session, fine_id)
            if not fine:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if fine.paid:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–≠—Ç–æ—Ç —à—Ç—Ä–∞—Ñ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω")
                return

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                       f"–û—Ç–º–µ—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ ID {fine_id} –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π?\n"
                                       f"–°—É–º–º–∞: {fine.amount} —Ä—É–±."):
                return

            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
            result = db.pay_fine(self.session, fine_id)
            if result:
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–®—Ç—Ä–∞—Ñ ID {fine_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π")
                self.load_fines()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —à—Ç—Ä–∞—Ñ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")

    def auto_create_overdue_fines(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É"""
        try:
            result = db.auto_create_overdue_fines(self.session)
            if result:
                messagebox.showinfo("–£—Å–ø–µ—Ö",
                                    f"–°–æ–∑–¥–∞–Ω–æ {len(result)} —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É\n"
                                    f"–û–±—â–∞—è —Å—É–º–º–∞: {sum(fine.amount for fine in result)} —Ä—É–±.")
                self.load_fines()
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ-—à—Ç—Ä–∞—Ñ–æ–≤: {e}")

    def delete_fine(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞"""
        selected = self.fines_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ç—Ä–∞—Ñ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        item = self.fines_tree.item(selected[0])
        fine_id = item['values'][0]
        amount = item['values'][3]
        status = item['values'][5]

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à—Ç—Ä–∞—Ñ ID {fine_id}?\n"
                                   f"–°—É–º–º–∞: {amount}\n"
                                   f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
                                   f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"):
            return

        try:
            if db.delete_fine(self.session, fine_id):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–®—Ç—Ä–∞—Ñ ID {fine_id} —É–¥–∞–ª–µ–Ω")
                self.load_fines()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à—Ç—Ä–∞—Ñ")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–∞: {e}")
if __name__ == "__main__":
    app = LibraryApp()
    app.mainloop()
