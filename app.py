import customtkinter as ctk
from datetime import datetime, date
import db.db_funcs as db
from tkinter import messagebox, ttk
import threading
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


class LibraryApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
        self.geometry("900x600")
        self.minsize(900, 700)

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        self.session = db.get_session()
        self.current_user = None  # –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.is_running = True  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        self.setup_ui()

    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        title_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(title_frame, text="üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
                     font=ctk.CTkFont(size=24, weight="bold")).pack(pady=10)

        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_status_label = ctk.CTkLabel(title_frame,
                                              text="‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                                              text_color="red",
                                              font=ctk.CTkFont(weight="bold"))
        self.auth_status_label.pack(pady=5)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        content_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        left_column = ctk.CTkFrame(content_frame)
        left_column.pack(side="left", fill="both", expand=True, padx=(0, 10))

        # –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        right_column = ctk.CTkFrame(content_frame)
        right_column.pack(side="right", fill="y", padx=(10, 0))

        self.setup_statistics_section(left_column)
        self.setup_auth_section(right_column)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        self.full_version_btn = ctk.CTkButton(main_frame,
                                              text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏",
                                              command=self.open_full_version,
                                              state="disabled",
                                              fg_color="#7209B7",
                                              hover_color="#560BAD")
        self.full_version_btn.pack(pady=10)

    def setup_statistics_section(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ctk.CTkLabel(parent, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
                     font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_container = ctk.CTkFrame(parent)
        self.stats_container.pack(fill="both", expand=True, padx=10, pady=10)

        # –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.loading_label = ctk.CTkLabel(self.stats_container,
                                          text="üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...",
                                          font=ctk.CTkFont(size=14))
        self.loading_label.pack(pady=50)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.load_statistics, daemon=True).start()

    def setup_auth_section(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        ctk.CTkLabel(parent, text="üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_form = ctk.CTkFrame(parent)
        auth_form.pack(fill="x", padx=10, pady=10)

        # –ü–æ–ª–µ email
        ctk.CTkLabel(auth_form, text="Email:").pack(anchor="w", pady=(10, 0))
        self.auth_email = ctk.CTkEntry(auth_form, placeholder_text="example@library.ru")
        self.auth_email.pack(fill="x", padx=10, pady=5)

        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        ctk.CTkLabel(auth_form, text="–ü–∞—Ä–æ–ª—å:").pack(anchor="w", pady=(10, 0))
        self.auth_password = ctk.CTkEntry(auth_form, placeholder_text="–ü–∞—Ä–æ–ª—å", show="‚Ä¢")
        self.auth_password.pack(fill="x", padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        self.login_btn = ctk.CTkButton(auth_form, text="–í–æ–π—Ç–∏",
                                       command=self.authenticate_user)
        self.login_btn.pack(pady=15)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_password.bind("<Return>", lambda e: self.authenticate_user())

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = ctk.CTkFrame(parent, fg_color="transparent")
        info_frame.pack(fill="x", padx=10, pady=20)

        ctk.CTkLabel(info_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w")

        info_text = """
‚Ä¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã 
  —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ 
  –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
‚Ä¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å 
  –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        """
        ctk.CTkLabel(info_frame, text=info_text, justify="left").pack(anchor="w", pady=10)

    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if not self.is_running:
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            readers_count = db.get_readers_count(self.session)
            books_count = db.get_books_count(self.session)
            active_loans = len(db.get_active_loans(self.session))
            unpaid_fines = len(db.get_unpaid_fines(self.session))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º again, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if self.is_running:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.after(0, self.display_statistics, readers_count, books_count, active_loans, unpaid_fines)

        except Exception as e:
            if self.is_running:
                self.after(0, self.show_error, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    def display_statistics(self, readers, books, loans, fines):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.is_running:
            return

        # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label.pack_forget()

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_grid = ctk.CTkFrame(self.stats_container)
        stats_grid.pack(fill="both", expand=True, padx=10, pady=10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        for i in range(2):
            stats_grid.columnconfigure(i, weight=1)
        for i in range(2):
            stats_grid.rowconfigure(i, weight=1)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        stats_data = [
            ("üë• –ß–∏—Ç–∞—Ç–µ–ª–∏", readers, "#4CC9F0", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π"),
            ("üìö –ö–Ω–∏–≥–∏", books, "#4361EE", "–í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"),
            ("üìñ –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏", loans, "#F72585", "–ö–Ω–∏–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö —É —á–∏—Ç–∞—Ç–µ–ª–µ–π"),
            ("üí∞ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã", fines, "#7209B7", "–°—É–º–º–∞—Ä–Ω—ã–µ –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã")
        ]

        for i, (title, count, color, description) in enumerate(stats_data):
            row = i // 2
            col = i % 2

            # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            card = ctk.CTkFrame(stats_grid, fg_color=color, corner_radius=15)
            card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")

            # –ß–∏—Å–ª–æ
            count_label = ctk.CTkLabel(card, text=str(count),
                                       font=ctk.CTkFont(size=32, weight="bold"))
            count_label.pack(pady=(20, 5))

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = ctk.CTkLabel(card, text=title,
                                       font=ctk.CTkFont(size=16, weight="bold"))
            title_label.pack(pady=5)

            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_label = ctk.CTkLabel(card, text=description,
                                      font=ctk.CTkFont(size=12),
                                      wraplength=200)
            desc_label.pack(pady=(5, 20), padx=10)

    def authenticate_user(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        email = self.auth_email.get().strip()
        password = self.auth_password.get().strip()

        if not email or not password:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.login_btn.configure(text="üîÑ –í—Ö–æ–¥...", state="disabled")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._authenticate_thread,
                         args=(email, password), daemon=True).start()

    def _authenticate_thread(self, email, password):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            result = db.authenticate_librarian(self.session, email, password)
            if self.is_running:
                self.after(0, self._handle_auth_result, result)
        except Exception as e:
            if self.is_running:
                self.after(0, self._handle_auth_error, e)

    def _handle_auth_result(self, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if not self.is_running:
            return

        if user:
            self.current_user = user
            self.auth_status_label.configure(text=f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {user.name}",
                                             text_color="green")

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            self.full_version_btn.configure(state="normal")

            # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ "–í—ã–π—Ç–∏"
            self.login_btn.configure(text="–í—ã–π—Ç–∏",
                                     command=self.logout_user,
                                     fg_color="#F72585",
                                     hover_color="#B5179E")

            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!")

            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.auth_email.delete(0, "end")
            self.auth_password.delete(0, "end")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            self.login_btn.configure(text="–í–æ–π—Ç–∏", state="normal")

    def logout_user(self):
        """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.current_user = None
        self.auth_status_label.configure(text="‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                                         text_color="red")

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        self.full_version_btn.configure(state="disabled")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.login_btn.configure(text="–í–æ–π—Ç–∏",
                                 command=self.authenticate_user,
                                 fg_color=["#3B8ED0", "#1F6AA5"],
                                 hover_color=["#36719F", "#144870"])

        messagebox.showinfo("–í—ã—Ö–æ–¥", "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

    def open_full_version(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.current_user:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        self.is_running = False

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        if self.session:
            db.close_session(self.session)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        self.destroy()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
        full_app = FullLibraryApp(self.current_user)
        full_app.mainloop()

    def _handle_auth_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if not self.is_running:
            return
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error}")
        self.login_btn.configure(text="–í–æ–π—Ç–∏", state="normal")

    def show_error(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not self.is_running:
            return
        self.loading_label.configure(text=f"‚ùå {message}", text_color="red")

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.is_running = False
        if hasattr(self, 'session'):
            db.close_session(self.session)
        self.destroy()


class FullLibraryApp(ctk.CTk):
    """–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""

    def __init__(self, user):
        super().__init__()

        self.current_user = user
        self.session = db.get_session()
        self.is_running = True

        self.title(f"üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - {user.name}")
        self.geometry("1200x500")
        self.minsize(1000, 600)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.setup_ui()

    def setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(fill="both", expand=True, padx=20, pady=20)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabview.add("–ì–ª–∞–≤–Ω–∞—è")
        self.tabview.add("–ß–∏—Ç–∞—Ç–µ–ª–∏")
        self.tabview.add("–ö–Ω–∏–≥–∏")
        self.tabview.add("–í—ã–¥–∞—á–∏")
        self.tabview.add("–®—Ç—Ä–∞—Ñ—ã")
        self.tabview.add("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä–∏")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = ctk.CTkFrame(self.tabview.tab("–ì–ª–∞–≤–Ω–∞—è"))
        user_info.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(user_info, text=f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {self.current_user.name}",
                     font=ctk.CTkFont(weight="bold")).pack(side="left")

        ctk.CTkLabel(user_info, text=f"üìß {self.current_user.email}",
                     font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(20, 0))

        if self.current_user.position:
            ctk.CTkLabel(user_info, text=f"üíº {self.current_user.position}",
                         font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(20, 0))

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        ctk.CTkButton(user_info, text="üö™ –í—ã–π—Ç–∏",
                      command=self.logout,
                      fg_color="#F72585",
                      hover_color="#B5179E").pack(side="right")

        # –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
        for tab_name in ["–ß–∏—Ç–∞—Ç–µ–ª–∏", "–ö–Ω–∏–≥–∏", "–í—ã–¥–∞—á–∏", "–®—Ç—Ä–∞—Ñ—ã", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä–∏"]:
            tab = self.tabview.tab(tab_name)
            ctk.CTkLabel(tab, text=f"–†–∞–∑–¥–µ–ª '{tab_name}' - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                         font=ctk.CTkFont(size=16)).pack(pady=50)

            ctk.CTkLabel(tab, text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π —á–∞—Å—Ç—å—é —Å–∏—Å—Ç–µ–º—ã",
                         font=ctk.CTkFont(size=12)).pack(pady=10)

        self.setup_readers_tab()

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.is_running = False
        if self.session:
            db.close_session(self.session)
        self.destroy()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_app = LibraryApp()
        auth_app.mainloop()

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.is_running = False
        if hasattr(self, 'session'):
            db.close_session(self.session)
        self.destroy()
        sys.exit(0)

    def setup_readers_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ß–∏—Ç–∞—Ç–µ–ª–∏"""
        tab = self.tabview.tab("–ß–∏—Ç–∞—Ç–µ–ª–∏")

        # –û—á–∏—â–∞–µ–º –≤–∫–ª–∞–¥–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for widget in tab.winfo_children():
            widget.destroy()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ctk.CTkFrame(main_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 10), pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π
        right_panel = ctk.CTkFrame(main_frame)
        right_panel.pack(side="right", fill="both", expand=True, pady=10)

        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        ctk.CTkLabel(left_panel, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è–º–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(left_panel)
        filter_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä —á–∏—Ç–∞—Ç–µ–ª–µ–π:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.reader_filter = ctk.CTkComboBox(filter_frame,
                                             values=[
                                                 "–í—Å–µ —á–∏—Ç–∞—Ç–µ–ª–∏",
                                                 "–° –∫–Ω–∏–≥–∞–º–∏ –Ω–∞ —Ä—É–∫–∞—Ö",
                                                 "–° –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º–∏",
                                                 "–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–¥–∞—á"
                                             ],
                                             command=self.apply_reader_filter)
        self.reader_filter.set("–í—Å–µ —á–∏—Ç–∞—Ç–µ–ª–∏")
        self.reader_filter.pack(fill="x", pady=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.reader_search = ctk.CTkEntry(search_frame, placeholder_text="–ò–º—è, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
        self.reader_search.pack(fill="x", pady=5)
        self.reader_search.bind("<KeyRelease>", self.search_readers)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(left_panel)
        btn_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkButton(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è",
                      command=self.show_add_reader_dialog).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ",
                      command=self.show_edit_reader_dialog,
                      fg_color="#4CC9F0").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ",
                      command=self.delete_reader,
                      fg_color="#F72585").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_readers).pack(fill="x", pady=5)

        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–ü–ò–°–û–ö –ß–ò–¢–ê–¢–ï–õ–ï–ô ===
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(right_panel)
        header_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(header_frame, text="–°–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(side="left")

        self.readers_count_label = ctk.CTkLabel(header_frame, text="–í—Å–µ–≥–æ: 0")
        self.readers_count_label.pack(side="right")

        # –¢–∞–±–ª–∏—Ü–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π
        table_frame = ctk.CTkFrame(right_panel)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        # –°–æ–∑–¥–∞–µ–º Treeview —Å –ø–æ–ª–æ—Å–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.readers_tree = ttk.Treeview(table_frame,
                                         columns=("ID", "Name", "Email", "Phone", "RegDate", "ActiveLoans", "Overdue"),
                                         show="headings")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_config = [
            ("ID", "ID", 50),
            ("Name", "–§–ò–û", 200),
            ("Email", "Email", 150),
            ("Phone", "–¢–µ–ª–µ—Ñ–æ–Ω", 120),
            ("RegDate", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", 120),
            ("ActiveLoans", "–ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏", 120),
            ("Overdue", "–ü—Ä–æ—Å—Ä–æ—á–∫–∏", 80)
        ]

        for col_id, heading, width in columns_config:
            self.readers_tree.heading(col_id, text=heading)
            self.readers_tree.column(col_id, width=width)

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.readers_tree.yview)
        self.readers_tree.configure(yscrollcommand=scrollbar.set)

        self.readers_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.readers_tree.bind("<Double-1>", lambda e: self.show_edit_reader_dialog())

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_readers()

    def apply_reader_filter(self, choice):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Å–ø–∏—Å–∫—É —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        if not hasattr(self, 'all_readers'):
            return

        filtered_readers = []

        if choice == "–í—Å–µ —á–∏—Ç–∞—Ç–µ–ª–∏":
            filtered_readers = self.all_readers
        elif choice == "–° –∫–Ω–∏–≥–∞–º–∏ –Ω–∞ —Ä—É–∫–∞—Ö":
            for reader in self.all_readers:
                if reader.get('active_loans', 0) > 0:
                    filtered_readers.append(reader)
        elif choice == "–° –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º–∏":
            for reader in self.all_readers:
                if reader.get('overdue', 0) > 0:
                    filtered_readers.append(reader)
        elif choice == "–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–¥–∞—á":
            for reader in self.all_readers:
                if reader.get('active_loans', 0) == 0:
                    filtered_readers.append(reader)

        self.display_readers(filtered_readers)

    def search_readers(self, event=None):
        """–ü–æ–∏—Å–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        search_term = self.reader_search.get().strip().lower()
        if not search_term:
            self.apply_reader_filter(self.reader_filter.get())
            return

        filtered_readers = []
        for reader in self.all_readers:
            if (search_term in reader['name'].lower() or
                    search_term in reader['email'].lower() or
                    (reader['phone'] and search_term in reader['phone'])):
                filtered_readers.append(reader)

        self.display_readers(filtered_readers)

    def load_readers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π
            readers = db.get_all_readers(self.session)

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–∏—Ç–∞—Ç–µ–ª–µ
            self.all_readers = []
            for reader in readers:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏
                active_loans = db.get_loans_by_reader(self.session, reader.id, active_only=True)

                # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏
                overdue_count = 0
                for loan in active_loans:
                    if loan.return_date < date.today():
                        overdue_count += 1

                self.all_readers.append({
                    'id': reader.id,
                    'name': reader.name,
                    'email': reader.email,
                    'phone': reader.phone_number,
                    'reg_date': reader.registration_date,
                    'active_loans': len(active_loans),
                    'overdue': overdue_count
                })

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
            self.apply_reader_filter(self.reader_filter.get())

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª–µ–π: {e}")

    def display_readers(self, readers):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.readers_tree.get_children():
            self.readers_tree.delete(item)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for reader in readers:
            self.readers_tree.insert("", "end", values=(
                reader['id'],
                reader['name'],
                reader['email'],
                reader['phone'] or "-",
                reader['reg_date'].strftime("%d.%m.%Y"),
                reader['active_loans'],
                reader['overdue']
            ))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        self.readers_count_label.configure(text=f"–í—Å–µ–≥–æ: {len(readers)}")

    def show_add_reader_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—è"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è")
        dialog.geometry("450x450")  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        dialog.minsize(450, 400)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        dialog.transient(self)
        dialog.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        dialog.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
        y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

        ctk.CTkLabel(dialog, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=15)

        form_frame = ctk.CTkFrame(dialog)
        form_frame.pack(fill="both", expand=True, padx=20, pady=10)

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        ctk.CTkLabel(form_frame, text="–§–ò–û:*").pack(anchor="w", pady=(10, 0))
        name_entry = ctk.CTkEntry(form_frame, height=35)
        name_entry.pack(fill="x", pady=5)

        ctk.CTkLabel(form_frame, text="Email:*").pack(anchor="w", pady=(10, 0))
        email_entry = ctk.CTkEntry(form_frame, height=35)
        email_entry.pack(fill="x", pady=5)

        ctk.CTkLabel(form_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:").pack(anchor="w", pady=(10, 0))
        phone_entry = ctk.CTkEntry(form_frame, height=35)
        phone_entry.pack(fill="x", pady=5)

        def save_reader():
            name = name_entry.get().strip()
            email = email_entry.get().strip()
            phone = phone_entry.get().strip() or None

            if not name or not email:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–§–ò–û –∏ Email)")
                return

            try:
                result = db.create_reader(self.session, name, email, phone)
                if result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–∏—Ç–∞—Ç–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    dialog.destroy()
                    self.load_readers()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è: {e}")

        # –ö–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ—Ä–µ–π–º–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
        btn_frame = ctk.CTkFrame(dialog)
        btn_frame.pack(fill="x", padx=20, pady=15)

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_reader,
                      width=100).pack(side="right")

    def show_edit_reader_dialog(self):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—è"""
        selected = self.readers_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Ç–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        item = self.readers_tree.item(selected[0])
        reader_id = item['values'][0]

        try:
            reader = db.get_reader_by_id(self.session, reader_id)
            if not reader:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ß–∏—Ç–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            dialog = ctk.CTkToplevel(self)
            dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è")
            dialog.geometry("450x450")
            dialog.minsize(450, 400)
            dialog.transient(self)
            dialog.grab_set()

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            dialog.update_idletasks()
            x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
            y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
            dialog.geometry(f"+{x}+{y}")

            ctk.CTkLabel(dialog, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è",
                         font=ctk.CTkFont(size=16, weight="bold")).pack(pady=15)

            form_frame = ctk.CTkFrame(dialog)
            form_frame.pack(fill="both", expand=True, padx=20, pady=10)

            # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
            ctk.CTkLabel(form_frame, text="–§–ò–û:*").pack(anchor="w", pady=(10, 0))
            name_entry = ctk.CTkEntry(form_frame, height=35)
            name_entry.insert(0, reader.name)
            name_entry.pack(fill="x", pady=5)

            ctk.CTkLabel(form_frame, text="Email:*").pack(anchor="w", pady=(10, 0))
            email_entry = ctk.CTkEntry(form_frame, height=35)
            email_entry.insert(0, reader.email)
            email_entry.pack(fill="x", pady=5)

            ctk.CTkLabel(form_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:").pack(anchor="w", pady=(10, 0))
            phone_entry = ctk.CTkEntry(form_frame, height=35)
            if reader.phone_number:
                phone_entry.insert(0, reader.phone_number)
            phone_entry.pack(fill="x", pady=5)

            def save_changes():
                name = name_entry.get().strip()
                email = email_entry.get().strip()
                phone = phone_entry.get().strip() or None

                if not name or not email:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–§–ò–û –∏ Email)")
                    return

                try:
                    result = db.update_reader(self.session, reader_id, name=name, email=email, phone_number=phone)
                    if result:
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —á–∏—Ç–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                        dialog.destroy()
                        self.load_readers()
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

            # –ö–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ—Ä–µ–π–º–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
            btn_frame = ctk.CTkFrame(dialog)
            btn_frame.pack(fill="x", padx=20, pady=15)

            ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                          command=dialog.destroy,
                          width=100,
                          fg_color="gray").pack(side="left", padx=(0, 10))

            ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                          command=save_changes,
                          width=100).pack(side="right")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def delete_reader(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è"""
        selected = self.readers_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Ç–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        item = self.readers_tree.item(selected[0])
        reader_id = item['values'][0]
        reader_name = item['values'][1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏
        try:
            active_loans = db.get_loans_by_reader(self.session, reader_id, active_only=True)
            if active_loans:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                     f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è {reader_name}!\n"
                                     f"–£ –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏ –∫–Ω–∏–≥.")
                return
        except:
            pass

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è {reader_name}?"):
            return

        try:
            if db.delete_reader(self.session, reader_id):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–∏—Ç–∞—Ç–µ–ª—å {reader_name} —É–¥–∞–ª–µ–Ω")
                self.load_readers()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è: {e}")


if __name__ == "__main__":
    app = LibraryApp()
    app.mainloop()