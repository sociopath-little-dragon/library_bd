import customtkinter as ctk
from datetime import datetime, date
import db.db_funcs as db
from tkinter import messagebox, ttk
import threading
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


class LibraryApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.title("üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
        self.geometry("900x600")
        self.minsize(900, 700)

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        self.session = db.get_session()
        self.current_user = None  # –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.is_running = True  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        self.setup_ui()

    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ctk.CTkFrame(self)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        title_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(title_frame, text="üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
                     font=ctk.CTkFont(size=24, weight="bold")).pack(pady=10)

        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_status_label = ctk.CTkLabel(title_frame,
                                              text="‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                                              text_color="red",
                                              font=ctk.CTkFont(weight="bold"))
        self.auth_status_label.pack(pady=5)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        content_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        left_column = ctk.CTkFrame(content_frame)
        left_column.pack(side="left", fill="both", expand=True, padx=(0, 10))

        # –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        right_column = ctk.CTkFrame(content_frame)
        right_column.pack(side="right", fill="y", padx=(10, 0))

        self.setup_statistics_section(left_column)
        self.setup_auth_section(right_column)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        self.full_version_btn = ctk.CTkButton(main_frame,
                                              text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏",
                                              command=self.open_full_version,
                                              state="disabled",
                                              fg_color="#7209B7",
                                              hover_color="#560BAD")
        self.full_version_btn.pack(pady=10)

    def setup_statistics_section(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ctk.CTkLabel(parent, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
                     font=ctk.CTkFont(size=18, weight="bold")).pack(pady=10)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_container = ctk.CTkFrame(parent)
        self.stats_container.pack(fill="both", expand=True, padx=10, pady=10)

        # –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.loading_label = ctk.CTkLabel(self.stats_container,
                                          text="üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...",
                                          font=ctk.CTkFont(size=14))
        self.loading_label.pack(pady=50)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.load_statistics, daemon=True).start()

    def setup_auth_section(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        ctk.CTkLabel(parent, text="üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_form = ctk.CTkFrame(parent)
        auth_form.pack(fill="x", padx=10, pady=10)

        # –ü–æ–ª–µ email
        ctk.CTkLabel(auth_form, text="Email:").pack(anchor="w", pady=(10, 0))
        self.auth_email = ctk.CTkEntry(auth_form, placeholder_text="example@library.ru")
        self.auth_email.pack(fill="x", padx=10, pady=5)

        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        ctk.CTkLabel(auth_form, text="–ü–∞—Ä–æ–ª—å:").pack(anchor="w", pady=(10, 0))
        self.auth_password = ctk.CTkEntry(auth_form, placeholder_text="–ü–∞—Ä–æ–ª—å", show="‚Ä¢")
        self.auth_password.pack(fill="x", padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        self.login_btn = ctk.CTkButton(auth_form, text="–í–æ–π—Ç–∏",
                                       command=self.authenticate_user)
        self.login_btn.pack(pady=15)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_password.bind("<Return>", lambda e: self.authenticate_user())

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_frame = ctk.CTkFrame(parent, fg_color="transparent")
        info_frame.pack(fill="x", padx=10, pady=20)

        ctk.CTkLabel(info_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w")

        info_text = """
‚Ä¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã 
  —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ 
  –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
‚Ä¢ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å 
  –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        """
        ctk.CTkLabel(info_frame, text=info_text, justify="left").pack(anchor="w", pady=10)

    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if not self.is_running:
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            readers_count = db.get_readers_count(self.session)
            books_count = db.get_books_count(self.session)
            active_loans = len(db.get_active_loans(self.session))
            unpaid_fines = len(db.get_unpaid_fines(self.session))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º again, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if self.is_running:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.after(0, self.display_statistics, readers_count, books_count, active_loans, unpaid_fines)

        except Exception as e:
            if self.is_running:
                self.after(0, self.show_error, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

    def display_statistics(self, readers, books, loans, fines):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.is_running:
            return

        # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_label.pack_forget()

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_grid = ctk.CTkFrame(self.stats_container)
        stats_grid.pack(fill="both", expand=True, padx=10, pady=10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        for i in range(2):
            stats_grid.columnconfigure(i, weight=1)
        for i in range(2):
            stats_grid.rowconfigure(i, weight=1)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        stats_data = [
            ("üë• –ß–∏—Ç–∞—Ç–µ–ª–∏", readers, "#4CC9F0", "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π"),
            ("üìö –ö–Ω–∏–≥–∏", books, "#4361EE", "–í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"),
            ("üìñ –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏", loans, "#F72585", "–ö–Ω–∏–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö —É —á–∏—Ç–∞—Ç–µ–ª–µ–π"),
            ("üí∞ –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã", fines, "#7209B7", "–°—É–º–º–∞—Ä–Ω—ã–µ –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã")
        ]

        for i, (title, count, color, description) in enumerate(stats_data):
            row = i // 2
            col = i % 2

            # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            card = ctk.CTkFrame(stats_grid, fg_color=color, corner_radius=15)
            card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")

            # –ß–∏—Å–ª–æ
            count_label = ctk.CTkLabel(card, text=str(count),
                                       font=ctk.CTkFont(size=32, weight="bold"))
            count_label.pack(pady=(20, 5))

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = ctk.CTkLabel(card, text=title,
                                       font=ctk.CTkFont(size=16, weight="bold"))
            title_label.pack(pady=5)

            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_label = ctk.CTkLabel(card, text=description,
                                      font=ctk.CTkFont(size=12),
                                      wraplength=200)
            desc_label.pack(pady=(5, 20), padx=10)

    def authenticate_user(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        email = self.auth_email.get().strip()
        password = self.auth_password.get().strip()

        if not email or not password:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        self.login_btn.configure(text="üîÑ –í—Ö–æ–¥...", state="disabled")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._authenticate_thread,
                         args=(email, password), daemon=True).start()

    def _authenticate_thread(self, email, password):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            result = db.authenticate_librarian(self.session, email, password)
            if self.is_running:
                self.after(0, self._handle_auth_result, result)
        except Exception as e:
            if self.is_running:
                self.after(0, self._handle_auth_error, e)

    def _handle_auth_result(self, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if not self.is_running:
            return

        if user:
            self.current_user = user
            self.auth_status_label.configure(text=f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {user.name}",
                                             text_color="green")

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            self.full_version_btn.configure(state="normal")

            # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ "–í—ã–π—Ç–∏"
            self.login_btn.configure(text="–í—ã–π—Ç–∏",
                                     command=self.logout_user,
                                     fg_color="#F72585",
                                     hover_color="#B5179E")

            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!")

            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.auth_email.delete(0, "end")
            self.auth_password.delete(0, "end")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            self.login_btn.configure(text="–í–æ–π—Ç–∏", state="normal")

    def logout_user(self):
        """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.current_user = None
        self.auth_status_label.configure(text="‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
                                         text_color="red")

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        self.full_version_btn.configure(state="disabled")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.login_btn.configure(text="–í–æ–π—Ç–∏",
                                 command=self.authenticate_user,
                                 fg_color=["#3B8ED0", "#1F6AA5"],
                                 hover_color=["#36719F", "#144870"])

        messagebox.showinfo("–í—ã—Ö–æ–¥", "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

    def open_full_version(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.current_user:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        self.is_running = False

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        if self.session:
            db.close_session(self.session)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        self.destroy()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é
        full_app = FullLibraryApp(self.current_user)
        full_app.mainloop()

    def _handle_auth_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if not self.is_running:
            return
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error}")
        self.login_btn.configure(text="–í–æ–π—Ç–∏", state="normal")

    def show_error(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not self.is_running:
            return
        self.loading_label.configure(text=f"‚ùå {message}", text_color="red")

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.is_running = False
        if hasattr(self, 'session'):
            db.close_session(self.session)
        self.destroy()


class FullLibraryApp(ctk.CTk):
    """–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""

    def __init__(self, user):
        super().__init__()

        self.current_user = user
        self.session = db.get_session()
        self.is_running = True

        self.title(f"üìö –ë–∏–±–ª–∏–æ—Ç–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - {user.name}")
        self.geometry("1200x500")
        self.minsize(1000, 600)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.setup_ui()

    def setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(fill="both", expand=True, padx=20, pady=20)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabview.add("–ì–ª–∞–≤–Ω–∞—è")
        self.tabview.add("–ß–∏—Ç–∞—Ç–µ–ª–∏")
        self.tabview.add("–ö–Ω–∏–≥–∏")
        self.tabview.add("–í—ã–¥–∞—á–∏")
        self.tabview.add("–®—Ç—Ä–∞—Ñ—ã")
        self.tabview.add("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä–∏")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = ctk.CTkFrame(self.tabview.tab("–ì–ª–∞–≤–Ω–∞—è"))
        user_info.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(user_info, text=f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {self.current_user.name}",
                     font=ctk.CTkFont(weight="bold")).pack(side="left")

        ctk.CTkLabel(user_info, text=f"üìß {self.current_user.email}",
                     font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(20, 0))

        if self.current_user.position:
            ctk.CTkLabel(user_info, text=f"üíº {self.current_user.position}",
                         font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(20, 0))

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        ctk.CTkButton(user_info, text="üö™ –í—ã–π—Ç–∏",
                      command=self.logout,
                      fg_color="#F72585",
                      hover_color="#B5179E").pack(side="right")

        # –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
        for tab_name in ["–ß–∏—Ç–∞—Ç–µ–ª–∏", "–ö–Ω–∏–≥–∏", "–í—ã–¥–∞—á–∏", "–®—Ç—Ä–∞—Ñ—ã", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä–∏"]:
            tab = self.tabview.tab(tab_name)
            ctk.CTkLabel(tab, text=f"–†–∞–∑–¥–µ–ª '{tab_name}' - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                         font=ctk.CTkFont(size=16)).pack(pady=50)

            ctk.CTkLabel(tab, text="–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π —á–∞—Å—Ç—å—é —Å–∏—Å—Ç–µ–º—ã",
                         font=ctk.CTkFont(size=12)).pack(pady=10)

        self.setup_readers_tab()
        self.setup_books_tab()

    def setup_books_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ö–Ω–∏–≥–∏ —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏"""
        tab = self.tabview.tab("–ö–Ω–∏–≥–∏")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤
        mode_frame = ctk.CTkFrame(main_frame)
        mode_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(mode_frame, text="–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                     font=ctk.CTkFont(weight="bold")).pack(side="left", padx=(0, 10))

        self.books_mode = ctk.StringVar(value="books")
        ctk.CTkRadioButton(mode_frame, text="üìö –û–±–∑–æ—Ä –∫–Ω–∏–≥",
                           variable=self.books_mode, value="books",
                           command=self.switch_books_mode).pack(side="left", padx=(0, 20))
        ctk.CTkRadioButton(mode_frame, text="üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏",
                           variable=self.books_mode, value="copies",
                           command=self.switch_books_mode).pack(side="left")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞)
        self.books_content_frame = ctk.CTkFrame(main_frame)
        self.books_content_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ —Ä–µ–∂–∏–º–∞, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
        self.setup_books_mode()
        self.setup_copies_mode()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        self.switch_books_mode()

    def setup_books_mode(self):
        """–†–µ–∂–∏–º –æ–±–∑–æ—Ä–∞ –∫–Ω–∏–≥"""
        self.books_frame = ctk.CTkFrame(self.books_content_frame)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ctk.CTkFrame(self.books_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 10), pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
        right_panel = ctk.CTkFrame(self.books_frame)
        right_panel.pack(side="right", fill="both", expand=True, pady=10)

        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        ctk.CTkLabel(left_panel, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(left_panel)
        filter_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.books_filter = ctk.CTkComboBox(filter_frame,
                                            values=[
                                                "–í—Å–µ –∫–Ω–∏–≥–∏",
                                                "–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏",
                                                "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
                                                "–ú–∞–ª–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (1-2)"
                                            ],
                                            command=self.apply_books_filter)
        self.books_filter.set("–í—Å–µ –∫–Ω–∏–≥–∏")
        self.books_filter.pack(fill="x", pady=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.books_search = ctk.CTkEntry(search_frame, placeholder_text="–ù–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä, ISBN")
        self.books_search.pack(fill="x", pady=5)
        self.books_search.bind("<KeyRelease>", self.search_books)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(left_panel)
        btn_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkButton(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É",
                      command=self.show_add_book_dialog).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä",
                      command=self.show_add_copy_dialog,
                      fg_color="#4CC9F0").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É",
                      command=self.show_edit_book_dialog).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É",
                      command=self.delete_book).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_books).pack(fill="x", pady=5)


        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–ü–ò–°–û–ö –ö–ù–ò–ì ===
        header_frame = ctk.CTkFrame(right_panel)
        header_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(header_frame, text="–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(side="left")

        self.books_count_label = ctk.CTkLabel(header_frame, text="–í—Å–µ–≥–æ: 0")
        self.books_count_label.pack(side="right")

        # –¢–∞–±–ª–∏—Ü–∞ –∫–Ω–∏–≥
        table_frame = ctk.CTkFrame(right_panel)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        self.books_tree = ttk.Treeview(table_frame,
                                       columns=("ID", "Title", "Author", "ISBN", "Year",
                                                "TotalCopies", "AvailableCopies", "Genre"),
                                       show="headings")

        columns_config = [
            ("ID", "ID", 50),
            ("Title", "–ù–∞–∑–≤–∞–Ω–∏–µ", 200),
            ("Author", "–ê–≤—Ç–æ—Ä", 150),
            ("ISBN", "ISBN", 120),
            ("Year", "–ì–æ–¥", 80),
            ("TotalCopies", "–í—Å–µ–≥–æ —ç–∫–∑.", 100),
            ("AvailableCopies", "–í –Ω–∞–ª–∏—á–∏–∏", 100),
            ("Genre", "–ñ–∞–Ω—Ä", 120)
        ]

        for col_id, heading, width in columns_config:
            self.books_tree.heading(col_id, text=heading)
            self.books_tree.column(col_id, width=width)

        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.books_tree.yview)
        self.books_tree.configure(yscrollcommand=scrollbar.set)

        self.books_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.books_tree.bind("<Double-1>", lambda e: self.show_edit_book_dialog())

    def setup_copies_mode(self):
        """–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏"""
        self.copies_frame = ctk.CTkFrame(self.books_content_frame)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ctk.CTkFrame(self.copies_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 10), pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        right_panel = ctk.CTkFrame(self.copies_frame)
        right_panel.pack(side="right", fill="both", expand=True, pady=10)

        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        ctk.CTkLabel(left_panel, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–∏–ª—å—Ç—Ä—ã —Å—Ç–∞—Ç—É—Å–∞
        filter_frame = ctk.CTkFrame(left_panel)
        filter_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.copies_filter = ctk.CTkComboBox(filter_frame,
                                             values=[
                                                 "–í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã",
                                                 "–í –Ω–∞–ª–∏—á–∏–∏",
                                                 "–ù–∞ —Ä—É–∫–∞—Ö",
                                                 "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã",
                                                 "–°–ø–∏—Å–∞–Ω—ã"
                                             ],
                                             command=self.apply_copies_filter)
        self.copies_filter.set("–í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã")
        self.copies_filter.pack(fill="x", pady=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.copies_search = ctk.CTkEntry(search_frame, placeholder_text="–ù–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        self.copies_search.pack(fill="x", pady=5)
        self.copies_search.bind("<KeyRelease>", self.search_copies)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(left_panel)
        btn_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkButton(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä",
                      command=self.show_add_copy_dialog).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                      command=self.show_change_copy_status_dialog,
                      fg_color="#4CC9F0").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–°–ø–∏—Å–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä",
                      command=self.write_off_copy,
                      fg_color="#F72585").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_book_copies).pack(fill="x", pady=5)

        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–ü–ò–°–û–ö –≠–ö–ó–ï–ú–ü–õ–Ø–†–û–í ===
        header_frame = ctk.CTkFrame(right_panel)
        header_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(header_frame, text="–°–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(side="left")

        self.copies_count_label = ctk.CTkLabel(header_frame, text="–í—Å–µ–≥–æ: 0")
        self.copies_count_label.pack(side="right")

        # –¢–∞–±–ª–∏—Ü–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        table_frame = ctk.CTkFrame(right_panel)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        self.copies_tree = ttk.Treeview(table_frame,
                                        columns=("ID", "InvNumber", "BookTitle", "Author",
                                                 "Status", "DueDate", "Reader", "Condition"),
                                        show="headings")

        columns_config = [
            ("ID", "ID", 50),
            ("InvNumber", "–ò–Ω–≤. –Ω–æ–º–µ—Ä", 120),
            ("BookTitle", "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏", 200),
            ("Author", "–ê–≤—Ç–æ—Ä", 150),
            ("Status", "–°—Ç–∞—Ç—É—Å", 120),
            ("DueDate", "–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞", 120),
            ("Reader", "–ß–∏—Ç–∞—Ç–µ–ª—å", 150),
            ("Condition", "–°–æ—Å—Ç–æ—è–Ω–∏–µ", 100)
        ]

        for col_id, heading, width in columns_config:
            self.copies_tree.heading(col_id, text=heading)
            self.copies_tree.column(col_id, width=width)

        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.copies_tree.yview)
        self.copies_tree.configure(yscrollcommand=scrollbar.set)

        self.copies_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def switch_books_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –∫–Ω–∏–≥ –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        mode = self.books_mode.get()

        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã
        self.books_frame.pack_forget()
        self.copies_frame.pack_forget()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ñ—Ä–µ–π–º
        if mode == "books":
            self.books_frame.pack(fill="both", expand=True)
            self.load_books()
        else:
            self.copies_frame.pack(fill="both", expand=True)
            self.load_book_copies()

    def load_books(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö"""
        try:
            books = db.get_all_books(self.session)
            self.all_books = []

            for book in books:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö
                copies = db.get_copies_by_book(self.session, book.id)
                total_copies = len(copies)
                available_copies = len(
                    [c for c in copies if c.available == True])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ available –≤–º–µ—Å—Ç–æ status

                # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã –∫–Ω–∏–≥–∏
                genres = book.genres
                genre_names = [genre.name for genre in genres] if genres else []
                genre_display = ", ".join(genre_names) if genre_names else "–ù–µ —É–∫–∞–∑–∞–Ω"

                self.all_books.append({
                    'id': book.id,
                    'title': book.title,
                    'author': book.author,
                    'isbn': book.isbn,
                    'year': book.publish_year,
                    'genre': genre_display,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∂–∞–Ω—Ä–æ–≤
                    'total_copies': total_copies,
                    'available_copies': available_copies
                })

            self.apply_books_filter(self.books_filter.get())

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥–∏: {e}")

    def apply_books_filter(self, choice):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥"""
        if not hasattr(self, 'all_books'):
            return

        filtered_books = []

        if choice == "–í—Å–µ –∫–Ω–∏–≥–∏":
            filtered_books = self.all_books
        elif choice == "–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏":
            filtered_books = [b for b in self.all_books if b['available_copies'] > 0]
        elif choice == "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏":
            filtered_books = [b for b in self.all_books if b['available_copies'] == 0]
        elif choice == "–ú–∞–ª–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (1-2)":
            filtered_books = [b for b in self.all_books if 1 <= b['available_copies'] <= 2]

        self.display_books(filtered_books)

    def search_books(self, event=None):
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥"""
        search_term = self.books_search.get().strip().lower()
        if not search_term:
            self.apply_books_filter(self.books_filter.get())
            return

        filtered_books = []
        for book in self.all_books:
            if (search_term in book['title'].lower() or
                    search_term in book['author'].lower() or
                    (book['isbn'] and search_term in book['isbn'].lower()) or
                    (book['genre'] and search_term in book['genre'].lower())):
                filtered_books.append(book)

        self.display_books(filtered_books)

    def display_books(self, books):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–∏–≥ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        for item in self.books_tree.get_children():
            self.books_tree.delete(item)

        for book in books:
            self.books_tree.insert("", "end", values=(
                book['id'],
                book['title'],
                book['author'],
                book['isbn'] or "-",
                book['year'] or "-",
                book['total_copies'],
                book['available_copies'],
                book['genre'] or "-"
            ))

        self.books_count_label.configure(text=f"–í—Å–µ–≥–æ: {len(books)}")

    def load_book_copies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥"""
        try:
            copies = db.get_all_book_copies(self.session)
            self.all_copies = []

            for copy in copies:
                book = db.get_book_by_id(self.session, copy.book_id)
                reader_name = "-"
                due_date = "-"

                # –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –≤—ã–¥–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Ç–∞—Ç–µ–ª–µ
                if not copy.available:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ available
                    loan = db.get_active_loan_by_copy(self.session, copy.id)
                    if loan:
                        reader = db.get_reader_by_id(self.session, loan.reader_id)
                        reader_name = reader.name if reader else "-"
                        due_date = loan.return_date.strftime("%d.%m.%Y") if loan.return_date else "-"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç–æ–º
                if copy.available:
                    status_text = "–í –Ω–∞–ª–∏—á–∏–∏"
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
                    loan = db.get_active_loan_by_copy(self.session, copy.id)
                    if loan and loan.return_date and loan.return_date < date.today():
                        status_text = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞"
                    else:
                        status_text = "–ù–∞ —Ä—É–∫–∞—Ö"

                self.all_copies.append({
                    'id': copy.id,
                    'inventory_number': copy.inventory_number,
                    'book_title': book.title if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    'author': book.author if book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    'status': status_text,
                    'due_date': due_date,
                    'reader': reader_name,
                    'condition': copy.condition,
                    'copy_obj': copy
                })

            self.apply_copies_filter(self.copies_filter.get())

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä—ã: {e}")

    def get_copy_status_text(self, status):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        status_map = {
            'available': '–í –Ω–∞–ª–∏—á–∏–∏',
            'borrowed': '–ù–∞ —Ä—É–∫–∞—Ö',
            'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
            'written_off': '–°–ø–∏—Å–∞–Ω–∞',
            'repair': '–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ'
        }
        return status_map.get(status, status)

    def apply_copies_filter(self, choice):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Å–ø–∏—Å–∫—É —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        if not hasattr(self, 'all_copies'):
            return

        filtered_copies = []

        if choice == "–í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã":
            filtered_copies = self.all_copies
        elif choice == "–í –Ω–∞–ª–∏—á–∏–∏":
            filtered_copies = [c for c in self.all_copies if c['copy_obj'].status == 'available']
        elif choice == "–ù–∞ —Ä—É–∫–∞—Ö":
            filtered_copies = [c for c in self.all_copies if c['copy_obj'].status == 'borrowed']
        elif choice == "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã":
            filtered_copies = [c for c in self.all_copies if c['copy_obj'].status == 'overdue']
        elif choice == "–°–ø–∏—Å–∞–Ω—ã":
            filtered_copies = [c for c in self.all_copies if c['copy_obj'].status == 'written_off']

        self.display_copies(filtered_copies)

    def search_copies(self, event=None):
        """–ü–æ–∏—Å–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        search_term = self.copies_search.get().strip().lower()
        if not search_term:
            self.apply_copies_filter(self.copies_filter.get())
            return

        filtered_copies = []
        for copy in self.all_copies:
            if (search_term in copy['book_title'].lower() or
                    search_term in copy['inventory_number'].lower()):
                filtered_copies.append(copy)

        self.display_copies(filtered_copies)

    def display_copies(self, copies):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        for item in self.copies_tree.get_children():
            self.copies_tree.delete(item)

        for copy in copies:
            self.copies_tree.insert("", "end", values=(
                copy['id'],
                copy['inventory_number'],
                copy['book_title'],
                copy['author'],
                copy['status'],
                copy['due_date'],
                copy['reader'],
                copy['condition']
            ))

        self.copies_count_label.configure(text=f"–í—Å–µ–≥–æ: {len(copies)}")


    def show_add_book_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
        dialog.geometry("500x650")
        dialog.minsize(500, 700)
        dialog.transient(self)
        dialog.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(main_container, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º—ã
        form_scrollable = ctk.CTkScrollableFrame(main_container)
        form_scrollable.pack(fill="both", expand=True)

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ:*", "title"),
            ("–ê–≤—Ç–æ—Ä:*", "author"),
            ("ISBN:", "isbn"),
            ("–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:", "year"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ:", "description")
        ]

        entries = {}
        for label, key in fields:
            ctk.CTkLabel(form_scrollable, text=label).pack(anchor="w", pady=(10, 0))
            if key == "description":
                entry = ctk.CTkTextbox(form_scrollable, height=80)
                entry.pack(fill="x", pady=5)
            else:
                entry = ctk.CTkEntry(form_scrollable, height=35)
                entry.pack(fill="x", pady=5)
            entries[key] = entry

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ)
        ctk.CTkLabel(form_scrollable, text="–ñ–∞–Ω—Ä—ã:").pack(anchor="w", pady=(10, 0))

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        genres_scrollable = ctk.CTkScrollableFrame(
            form_scrollable,
            height=120,
            fg_color=("gray80", "gray20")
        )
        genres_scrollable.pack(fill="x", pady=5)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        genres = db.get_all_genres(self.session)
        genre_vars = {}

        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞
        for genre in genres:
            var = ctk.BooleanVar()
            chk = ctk.CTkCheckBox(
                genres_scrollable,
                text=genre.name,
                variable=var
            )
            chk.pack(anchor="w", pady=2)
            genre_vars[genre.id] = var

        entries['genres'] = genre_vars

        # –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–∏–≥–∏
        def save_book():
            try:
                title = entries['title'].get().strip()
                author = entries['author'].get().strip()

                if not title or not author:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –ê–≤—Ç–æ—Ä)")
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É
                book_data = {
                    'title': title,
                    'author': author,
                    'isbn': entries['isbn'].get().strip() or None,
                    'publication_year': int(entries['year'].get()) if entries['year'].get().strip() else None,
                    'description': entries['description'].get("1.0", "end-1c").strip() or None
                }

                result = db.create_book(self.session, **book_data)
                if result:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã –∫ –∫–Ω–∏–≥–µ
                    selected_genre_vars = entries['genres']
                    added_genres_count = 0

                    for genre_id, var in selected_genre_vars.items():
                        if var.get():
                            success = db.add_genre_to_book(self.session, result.id, genre_id)
                            if success:
                                added_genres_count += 1

                    success_message = f"–ö–Ω–∏–≥–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
                    if added_genres_count > 0:
                        success_message += f"\n–î–æ–±–∞–≤–ª–µ–Ω–æ –∂–∞–Ω—Ä–æ–≤: {added_genres_count}"

                    messagebox.showinfo("–£—Å–ø–µ—Ö", success_message)
                    dialog.destroy()
                    self.load_books()

            except ValueError as e:
                if "year" in str(e).lower():
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–≤–Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(15, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_book,
                      width=100).pack(side="right")

    def show_add_copy_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä")
        dialog.geometry("450x500")  # –£–≤–µ–ª–∏—á–∏–ª –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        dialog.minsize(450, 500)
        dialog.transient(self)
        dialog.grab_set()

        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        ctk.CTkLabel(main_container, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–Ω–∏–≥–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º—ã
        form_scrollable = ctk.CTkScrollableFrame(main_container)
        form_scrollable.pack(fill="both", expand=True)

        # –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏
        ctk.CTkLabel(form_scrollable, text="–ö–Ω–∏–≥–∞:*").pack(anchor="w", pady=(10, 0))

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞
        books = db.get_all_books(self.session)
        book_options = [f"{book.title} ({book.author})" for book in books]
        book_ids = [book.id for book in books]

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ ID –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É —Ç–µ–∫—Å—Ç—É
        book_mapping = {f"{book.title} ({book.author})": book.id for book in books}

        book_combo = ctk.CTkComboBox(form_scrollable, values=book_options)
        book_combo.pack(fill="x", pady=5)

        ctk.CTkLabel(form_scrollable, text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä:*").pack(anchor="w", pady=(10, 0))
        inv_entry = ctk.CTkEntry(form_scrollable, height=35)
        inv_entry.pack(fill="x", pady=5)

        ctk.CTkLabel(form_scrollable, text="–°–æ—Å—Ç–æ—è–Ω–∏–µ:*").pack(anchor="w", pady=(10, 0))
        condition_combo = ctk.CTkComboBox(form_scrollable,
                                          values=["–û—Ç–ª–∏—á–Ω–æ–µ", "–•–æ—Ä–æ—à–µ–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "–ü–ª–æ—Ö–æ–µ"])
        condition_combo.set("–•–æ—Ä–æ—à–µ–µ")
        condition_combo.pack(fill="x", pady=5)

        ctk.CTkLabel(form_scrollable, text="–ú–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è:").pack(anchor="w", pady=(10, 0))
        location_entry = ctk.CTkEntry(form_scrollable, height=35, placeholder_text="–°—Ç–µ–ª–ª–∞–∂, –ø–æ–ª–∫–∞")
        location_entry.pack(fill="x", pady=5)

        def save_copy():
            try:
                selected_book_text = book_combo.get().strip()
                if not selected_book_text:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É")
                    return

                # –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                book_id = book_mapping.get(selected_book_text)
                if book_id is None:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞")
                    return

                inventory_number = inv_entry.get().strip()
                condition = condition_combo.get()
                location = location_entry.get().strip() or None

                if not inventory_number:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
                    return

                result = db.create_book_copy(self.session, book_id, inventory_number, condition, location)
                if result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–≠–∫–∑–µ–º–ø–ª—è—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    dialog.destroy()
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞
                    self.load_books()
                    self.load_book_copies()

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–≤–Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(15, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_copy,
                      width=100).pack(side="right")

    def show_edit_book_dialog(self):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
        selected = self.books_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
        book_id = self.books_tree.item(selected[0])['values'][0]
        book = db.get_book_by_id(self.session, book_id)

        if not book:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        dialog = ctk.CTkToplevel(self)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
        dialog.geometry("500x650")
        dialog.minsize(500, 650)
        dialog.transient(self)
        dialog.grab_set()

        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        ctk.CTkLabel(main_container, text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {book.title}",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ–æ—Ä–º—ã
        form_scrollable = ctk.CTkScrollableFrame(main_container)
        form_scrollable.pack(fill="both", expand=True)

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ:*", "title"),
            ("–ê–≤—Ç–æ—Ä:*", "author"),
            ("ISBN:", "isbn"),
            ("–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:", "publish_year"),
            ("–û–ø–∏—Å–∞–Ω–∏–µ:", "description")
        ]

        entries = {}
        for label, key in fields:
            ctk.CTkLabel(form_scrollable, text=label).pack(anchor="w", pady=(10, 0))
            if key == "description":
                entry = ctk.CTkTextbox(form_scrollable, height=80)
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                if getattr(book, key, None):
                    entry.insert("1.0", getattr(book, key))
                entry.pack(fill="x", pady=5)
            else:
                entry = ctk.CTkEntry(form_scrollable, height=35)
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                current_value = getattr(book, key, "")
                entry.insert(0, str(current_value) if current_value is not None else "")
                entry.pack(fill="x", pady=5)
            entries[key] = entry

        # –ü–æ–ª–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        ctk.CTkLabel(form_scrollable, text="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:").pack(anchor="w", pady=(10, 0))
        available_var = ctk.BooleanVar(value=book.available)
        available_check = ctk.CTkCheckBox(form_scrollable, text="–ö–Ω–∏–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞", variable=available_var)
        available_check.pack(anchor="w", pady=5)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ)
        ctk.CTkLabel(form_scrollable, text="–ñ–∞–Ω—Ä—ã:").pack(anchor="w", pady=(10, 0))

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π —Ñ—Ä–µ–π–º –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        genres_scrollable = ctk.CTkScrollableFrame(
            form_scrollable,
            height=120,
            fg_color=("gray80", "gray20")
        )
        genres_scrollable.pack(fill="x", pady=5)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        all_genres = db.get_all_genres(self.session)
        genre_vars = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∂–∞–Ω—Ä—ã –∫–Ω–∏–≥–∏
        current_genre_ids = [genre.id for genre in book.genres] if book.genres else []

        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞
        for genre in all_genres:
            var = ctk.BooleanVar(value=(genre.id in current_genre_ids))
            chk = ctk.CTkCheckBox(
                genres_scrollable,
                text=genre.name,
                variable=var
            )
            chk.pack(anchor="w", pady=2)
            genre_vars[genre.id] = var

        def save_changes():
            try:
                title = entries['title'].get().strip()
                author = entries['author'].get().strip()

                if not title or not author:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –ê–≤—Ç–æ—Ä)")
                    return

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    'title': title,
                    'author': author,
                    'isbn': entries['isbn'].get().strip() or None,
                    'description': entries['description'].get("1.0", "end-1c").strip() or None,
                    'available': available_var.get()
                }

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è
                year_str = entries['publish_year'].get().strip()
                if year_str:
                    try:
                        update_data['publish_year'] = int(year_str)
                    except ValueError:
                        messagebox.showerror("–û—à–∏–±–∫–∞", "–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                        return
                else:
                    update_data['publish_year'] = None

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
                result = db.update_book(self.session, book_id, **update_data)
                if not result:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã
                selected_genre_ids = []
                for genre_id, var in genre_vars.items():
                    if var.get():
                        selected_genre_ids.append(genre_id)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∂–∞–Ω—Ä—ã
                genre_result = db.set_book_genres(self.session, book_id, selected_genre_ids)

                if genre_result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–Ω–∏–≥–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    dialog.destroy()
                    self.load_books()
                else:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                           "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∂–∞–Ω—Ä–∞–º–∏")

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–≤–Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏)
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(15, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_changes,
                      width=100).pack(side="right")

        # –§–æ–∫—É—Å–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
        entries['title'].focus_set()

    def delete_book(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏"""
        selected = self.books_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
        book_id = self.books_tree.item(selected[0])['values'][0]
        book_title = self.books_tree.item(selected[0])['values'][1]
        book_author = self.books_tree.item(selected[0])['values'][2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–Ω–∏–≥–∏
        copies = db.get_copies_by_book(self.session, book_id)
        if copies:
            messagebox.showwarning(
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
                f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É '{book_title}'\n\n"
                f"–°—É—â–µ—Å—Ç–≤—É—é—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —ç—Ç–æ–π –∫–Ω–∏–≥–∏ ({len(copies)} —à—Ç.).\n"
                f"–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–Ω–∏–≥–∏."
            )
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É?\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book_title}\n"
            f"–ê–≤—Ç–æ—Ä: {book_author}\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            icon='warning'
        )

        if not confirm:
            return

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            success = db.delete_book(self.session, book_id)
            if success:
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–Ω–∏–≥–∞ '{book_title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                self.load_books()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}")

    def show_change_copy_status_dialog(self):
        """–î–∏–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–Ω–∏–≥–∏"""
        selected = self.copies_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –∏ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        copy_id = self.copies_tree.item(selected[0])['values'][0]
        inventory_number = self.copies_tree.item(selected[0])['values'][1]
        book_title = self.copies_tree.item(selected[0])['values'][2]
        current_status = self.copies_tree.item(selected[0])['values'][4]
        current_condition = self.copies_tree.item(selected[0])['values'][5]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        copy = db.get_copy_by_id(self.session, copy_id)
        if not copy:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–≠–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        dialog = ctk.CTkToplevel(self)
        dialog.title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞")
        dialog.geometry("500x400")
        dialog.minsize(500, 400)
        dialog.transient(self)
        dialog.grab_set()

        self.center_dialog(dialog)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ctk.CTkFrame(dialog)
        main_container.pack(fill="both", expand=True, padx=20, pady=15)

        ctk.CTkLabel(main_container, text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(0, 15))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        info_frame = ctk.CTkFrame(main_container)
        info_frame.pack(fill="x", pady=(0, 15))

        ctk.CTkLabel(info_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–µ–º–ø–ª—è—Ä–µ:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 5))

        ctk.CTkLabel(info_frame, text=f"üìñ –ö–Ω–∏–≥–∞: {book_title}").pack(anchor="w", pady=2)
        ctk.CTkLabel(info_frame, text=f"üî¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {inventory_number}").pack(anchor="w", pady=2)
        ctk.CTkLabel(info_frame, text=f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}").pack(anchor="w", pady=2)
        ctk.CTkLabel(info_frame, text=f"üè∑Ô∏è –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_condition}").pack(anchor="w", pady=2)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        ctk.CTkLabel(main_container, text="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:*",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 0))

        status_combo = ctk.CTkComboBox(main_container,
                                       values=["–î–æ—Å—Ç—É–ø–µ–Ω", "–í—ã–¥–∞–Ω", "–í —Ä–µ–º–æ–Ω—Ç–µ", "–£—Ç–µ—Ä—è–Ω"])
        status_combo.set(current_status)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status_combo.pack(fill="x", pady=5)

        # –ü–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        ctk.CTkLabel(main_container, text="–°–æ—Å—Ç–æ—è–Ω–∏–µ:*",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(10, 0))

        condition_combo = ctk.CTkComboBox(main_container,
                                          values=["–û—Ç–ª–∏—á–Ω–æ–µ", "–•–æ—Ä–æ—à–µ–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ", "–ü–ª–æ—Ö–æ–µ"])
        condition_combo.set(current_condition)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        condition_combo.pack(fill="x", pady=5)

        # –ü–æ–ª–µ –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        ctk.CTkLabel(main_container, text="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:").pack(anchor="w", pady=(10, 0))
        note_entry = ctk.CTkEntry(main_container, height=35, placeholder_text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")
        note_entry.pack(fill="x", pady=5)

        def save_status():
            try:
                new_status = status_combo.get()
                new_condition = condition_combo.get()
                note = note_entry.get().strip() or None

                if not new_status or not new_condition:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    return

                # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ available
                status_to_available = {
                    "–î–æ—Å—Ç—É–ø–µ–Ω": True,
                    "–í—ã–¥–∞–Ω": False,
                    "–í —Ä–µ–º–æ–Ω—Ç–µ": False,
                    "–£—Ç–µ—Ä—è–Ω": False,
                }

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    'available': status_to_available.get(new_status, False),
                    'condition': new_condition
                }

                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                # if note:
                #     update_data['note'] = note

                # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
                result = db.update_copy(self.session, copy_id, **update_data)
                if result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
                    dialog.destroy()
                    self.load_book_copies()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤

                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    print(f"–°—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {inventory_number} –∏–∑–º–µ–Ω–µ–Ω: {current_status} -> {new_status}")
                    if note:
                        print(f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}")

                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞")

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ctk.CTkFrame(main_container)
        btn_frame.pack(fill="x", pady=(20, 0))

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_status,
                      width=100).pack(side="right")

        # –§–æ–∫—É—Å–∏—Ä—É–µ–º –Ω–∞ –∫–æ–º–±–æ–±–æ–∫—Å–µ —Å—Ç–∞—Ç—É—Å–∞
        status_combo.focus_set()


    def write_off_copy(self):
        """–°–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
        selected = self.copies_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è")
            return

        item = self.copies_tree.item(selected[0])
        copy_id = item['values'][0]
        inv_number = item['values'][1]
        book_title = item['values'][2]

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä {inv_number}?\n"
                                   f"–ö–Ω–∏–≥–∞: {book_title}"):
            return

        try:
            db.delete_copy(self.session, copy_id)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–≠–∫–∑–µ–º–ø–ª—è—Ä {inv_number} —Å–ø–∏—Å–∞–Ω")
            self.load_book_copies()
            self.load_books()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä: {e}")

    def center_dialog(self, dialog):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞"""
        dialog.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
        y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.is_running = False
        if self.session:
            db.close_session(self.session)
        self.destroy()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_app = LibraryApp()
        auth_app.mainloop()

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.is_running = False
        if hasattr(self, 'session'):
            db.close_session(self.session)
        self.destroy()
        sys.exit(0)

    def setup_readers_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ß–∏—Ç–∞—Ç–µ–ª–∏"""
        tab = self.tabview.tab("–ß–∏—Ç–∞—Ç–µ–ª–∏")

        # –û—á–∏—â–∞–µ–º –≤–∫–ª–∞–¥–∫—É –æ—Ç —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for widget in tab.winfo_children():
            widget.destroy()

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = ctk.CTkFrame(main_frame)
        left_panel.pack(side="left", fill="y", padx=(0, 10), pady=10)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π
        right_panel = ctk.CTkFrame(main_frame)
        right_panel.pack(side="right", fill="both", expand=True, pady=10)

        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –£–ü–†–ê–í–õ–ï–ù–ò–ï ===
        ctk.CTkLabel(left_panel, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è–º–∏",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ctk.CTkFrame(left_panel)
        filter_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(filter_frame, text="–§–∏–ª—å—Ç—Ä —á–∏—Ç–∞—Ç–µ–ª–µ–π:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.reader_filter = ctk.CTkComboBox(filter_frame,
                                             values=[
                                                 "–í—Å–µ —á–∏—Ç–∞—Ç–µ–ª–∏",
                                                 "–° –∫–Ω–∏–≥–∞–º–∏ –Ω–∞ —Ä—É–∫–∞—Ö",
                                                 "–° –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º–∏",
                                                 "–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–¥–∞—á"
                                             ],
                                             command=self.apply_reader_filter)
        self.reader_filter.set("–í—Å–µ —á–∏—Ç–∞—Ç–µ–ª–∏")
        self.reader_filter.pack(fill="x", pady=5)

        # –ü–æ–∏—Å–∫
        search_frame = ctk.CTkFrame(left_panel)
        search_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(search_frame, text="–ü–æ–∏—Å–∫:",
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w", pady=(0, 5))

        self.reader_search = ctk.CTkEntry(search_frame, placeholder_text="–ò–º—è, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
        self.reader_search.pack(fill="x", pady=5)
        self.reader_search.bind("<KeyRelease>", self.search_readers)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(left_panel)
        btn_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkButton(btn_frame, text="–î–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è",
                      command=self.show_add_reader_dialog).pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ",
                      command=self.show_edit_reader_dialog,
                      fg_color="#4CC9F0").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ",
                      command=self.delete_reader,
                      fg_color="#F72585").pack(fill="x", pady=5)

        ctk.CTkButton(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_readers).pack(fill="x", pady=5)

        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨ - –°–ü–ò–°–û–ö –ß–ò–¢–ê–¢–ï–õ–ï–ô ===
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(right_panel)
        header_frame.pack(fill="x", padx=10, pady=10)

        ctk.CTkLabel(header_frame, text="–°–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(side="left")

        self.readers_count_label = ctk.CTkLabel(header_frame, text="–í—Å–µ–≥–æ: 0")
        self.readers_count_label.pack(side="right")

        # –¢–∞–±–ª–∏—Ü–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π
        table_frame = ctk.CTkFrame(right_panel)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))

        # –°–æ–∑–¥–∞–µ–º Treeview —Å –ø–æ–ª–æ—Å–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.readers_tree = ttk.Treeview(table_frame,
                                         columns=("ID", "Name", "Email", "Phone", "RegDate", "ActiveLoans", "Overdue"),
                                         show="headings")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns_config = [
            ("ID", "ID", 50),
            ("Name", "–§–ò–û", 200),
            ("Email", "Email", 150),
            ("Phone", "–¢–µ–ª–µ—Ñ–æ–Ω", 120),
            ("RegDate", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", 120),
            ("ActiveLoans", "–ê–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏", 120),
            ("Overdue", "–ü—Ä–æ—Å—Ä–æ—á–∫–∏", 80)
        ]

        for col_id, heading, width in columns_config:
            self.readers_tree.heading(col_id, text=heading)
            self.readers_tree.column(col_id, width=width)

        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.readers_tree.yview)
        self.readers_tree.configure(yscrollcommand=scrollbar.set)

        self.readers_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.readers_tree.bind("<Double-1>", lambda e: self.show_edit_reader_dialog())

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_readers()

    def apply_reader_filter(self, choice):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Å–ø–∏—Å–∫—É —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        if not hasattr(self, 'all_readers'):
            return

        filtered_readers = []

        if choice == "–í—Å–µ —á–∏—Ç–∞—Ç–µ–ª–∏":
            filtered_readers = self.all_readers
        elif choice == "–° –∫–Ω–∏–≥–∞–º–∏ –Ω–∞ —Ä—É–∫–∞—Ö":
            for reader in self.all_readers:
                if reader.get('active_loans', 0) > 0:
                    filtered_readers.append(reader)
        elif choice == "–° –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º–∏":
            for reader in self.all_readers:
                if reader.get('overdue', 0) > 0:
                    filtered_readers.append(reader)
        elif choice == "–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–¥–∞—á":
            for reader in self.all_readers:
                if reader.get('active_loans', 0) == 0:
                    filtered_readers.append(reader)

        self.display_readers(filtered_readers)

    def search_readers(self, event=None):
        """–ü–æ–∏—Å–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        search_term = self.reader_search.get().strip().lower()
        if not search_term:
            self.apply_reader_filter(self.reader_filter.get())
            return

        filtered_readers = []
        for reader in self.all_readers:
            if (search_term in reader['name'].lower() or
                    search_term in reader['email'].lower() or
                    (reader['phone'] and search_term in reader['phone'])):
                filtered_readers.append(reader)

        self.display_readers(filtered_readers)

    def load_readers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π
            readers = db.get_all_readers(self.session)

            # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–∏—Ç–∞—Ç–µ–ª–µ
            self.all_readers = []
            for reader in readers:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏
                active_loans = db.get_loans_by_reader(self.session, reader.id, active_only=True)

                # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏
                overdue_count = 0
                for loan in active_loans:
                    if loan.return_date < date.today():
                        overdue_count += 1

                self.all_readers.append({
                    'id': reader.id,
                    'name': reader.name,
                    'email': reader.email,
                    'phone': reader.phone_number,
                    'reg_date': reader.registration_date,
                    'active_loans': len(active_loans),
                    'overdue': overdue_count
                })

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
            self.apply_reader_filter(self.reader_filter.get())

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª–µ–π: {e}")

    def display_readers(self, readers):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.readers_tree.get_children():
            self.readers_tree.delete(item)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for reader in readers:
            self.readers_tree.insert("", "end", values=(
                reader['id'],
                reader['name'],
                reader['email'],
                reader['phone'] or "-",
                reader['reg_date'].strftime("%d.%m.%Y"),
                reader['active_loans'],
                reader['overdue']
            ))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        self.readers_count_label.configure(text=f"–í—Å–µ–≥–æ: {len(readers)}")

    def show_add_reader_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—è"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è")
        dialog.geometry("450x450")  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        dialog.minsize(450, 400)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        dialog.transient(self)
        dialog.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        dialog.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
        y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

        ctk.CTkLabel(dialog, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è",
                     font=ctk.CTkFont(size=16, weight="bold")).pack(pady=15)

        form_frame = ctk.CTkFrame(dialog)
        form_frame.pack(fill="both", expand=True, padx=20, pady=10)

        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        ctk.CTkLabel(form_frame, text="–§–ò–û:*").pack(anchor="w", pady=(10, 0))
        name_entry = ctk.CTkEntry(form_frame, height=35)
        name_entry.pack(fill="x", pady=5)

        ctk.CTkLabel(form_frame, text="Email:*").pack(anchor="w", pady=(10, 0))
        email_entry = ctk.CTkEntry(form_frame, height=35)
        email_entry.pack(fill="x", pady=5)

        ctk.CTkLabel(form_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:").pack(anchor="w", pady=(10, 0))
        phone_entry = ctk.CTkEntry(form_frame, height=35)
        phone_entry.pack(fill="x", pady=5)

        def save_reader():
            name = name_entry.get().strip()
            email = email_entry.get().strip()
            phone = phone_entry.get().strip() or None

            if not name or not email:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–§–ò–û –∏ Email)")
                return

            try:
                result = db.create_reader(self.session, name, email, phone)
                if result:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–∏—Ç–∞—Ç–µ–ª—å {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    dialog.destroy()
                    self.load_readers()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è: {e}")

        # –ö–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ—Ä–µ–π–º–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
        btn_frame = ctk.CTkFrame(dialog)
        btn_frame.pack(fill="x", padx=20, pady=15)

        ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                      command=dialog.destroy,
                      width=100,
                      fg_color="gray").pack(side="left", padx=(0, 10))

        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      command=save_reader,
                      width=100).pack(side="right")

    def show_edit_reader_dialog(self):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Ç–∞—Ç–µ–ª—è"""
        selected = self.readers_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Ç–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        item = self.readers_tree.item(selected[0])
        reader_id = item['values'][0]

        try:
            reader = db.get_reader_by_id(self.session, reader_id)
            if not reader:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ß–∏—Ç–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            dialog = ctk.CTkToplevel(self)
            dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è")
            dialog.geometry("450x450")
            dialog.minsize(450, 400)
            dialog.transient(self)
            dialog.grab_set()

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            dialog.update_idletasks()
            x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
            y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
            dialog.geometry(f"+{x}+{y}")

            ctk.CTkLabel(dialog, text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è",
                         font=ctk.CTkFont(size=16, weight="bold")).pack(pady=15)

            form_frame = ctk.CTkFrame(dialog)
            form_frame.pack(fill="both", expand=True, padx=20, pady=10)

            # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
            ctk.CTkLabel(form_frame, text="–§–ò–û:*").pack(anchor="w", pady=(10, 0))
            name_entry = ctk.CTkEntry(form_frame, height=35)
            name_entry.insert(0, reader.name)
            name_entry.pack(fill="x", pady=5)

            ctk.CTkLabel(form_frame, text="Email:*").pack(anchor="w", pady=(10, 0))
            email_entry = ctk.CTkEntry(form_frame, height=35)
            email_entry.insert(0, reader.email)
            email_entry.pack(fill="x", pady=5)

            ctk.CTkLabel(form_frame, text="–¢–µ–ª–µ—Ñ–æ–Ω:").pack(anchor="w", pady=(10, 0))
            phone_entry = ctk.CTkEntry(form_frame, height=35)
            if reader.phone_number:
                phone_entry.insert(0, reader.phone_number)
            phone_entry.pack(fill="x", pady=5)

            def save_changes():
                name = name_entry.get().strip()
                email = email_entry.get().strip()
                phone = phone_entry.get().strip() or None

                if not name or not email:
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–§–ò–û –∏ Email)")
                    return

                try:
                    result = db.update_reader(self.session, reader_id, name=name, email=email, phone_number=phone)
                    if result:
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —á–∏—Ç–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                        dialog.destroy()
                        self.load_readers()
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

            # –ö–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ—Ä–µ–π–º–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
            btn_frame = ctk.CTkFrame(dialog)
            btn_frame.pack(fill="x", padx=20, pady=15)

            ctk.CTkButton(btn_frame, text="–û—Ç–º–µ–Ω–∞",
                          command=dialog.destroy,
                          width=100,
                          fg_color="gray").pack(side="left", padx=(0, 10))

            ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                          command=save_changes,
                          width=100).pack(side="right")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def delete_reader(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è"""
        selected = self.readers_tree.selection()
        if not selected:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Ç–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        item = self.readers_tree.item(selected[0])
        reader_id = item['values'][0]
        reader_name = item['values'][1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏
        try:
            active_loans = db.get_loans_by_reader(self.session, reader_id, active_only=True)
            if active_loans:
                messagebox.showerror("–û—à–∏–±–∫–∞",
                                     f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è {reader_name}!\n"
                                     f"–£ –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–¥–∞—á–∏ –∫–Ω–∏–≥.")
                return
        except:
            pass

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è {reader_name}?"):
            return

        try:
            if db.delete_reader(self.session, reader_id):
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ß–∏—Ç–∞—Ç–µ–ª—å {reader_name} —É–¥–∞–ª–µ–Ω")
                self.load_readers()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è: {e}")


if __name__ == "__main__":
    app = LibraryApp()
    app.mainloop()